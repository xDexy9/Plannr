{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{useAuth}from'./AuthContext';import{jsx as _jsx}from\"react/jsx-runtime\";const TaskContext=/*#__PURE__*/createContext(undefined);export const TaskProvider=_ref=>{let{children}=_ref;const{user,updateProfile}=useAuth();const[tasks,setTasks]=useState(()=>{const savedTasks=localStorage.getItem('plannr_tasks');if(savedTasks){return JSON.parse(savedTasks);}// Sample tasks\nconst sampleTasks=[// Personal tasks\n{id:'1',title:'Morning workout routine',description:'30 minutes of cardio and strength training',dueDate:new Date().toISOString().split('T')[0],category:'Personal',completed:false,createdAt:new Date().toISOString(),importance:'high',days:[1,3,5]},{id:'2',title:'Grocery shopping',description:'Buy fruits, vegetables, and other essentials',dueDate:new Date(Date.now()+86400000).toISOString().split('T')[0],category:'Personal',completed:false,createdAt:new Date().toISOString(),importance:'medium',days:[2,5]},{id:'3',title:'Read a book',description:'Continue reading \"Atomic Habits\"',dueDate:new Date(Date.now()+172800000).toISOString().split('T')[0],category:'Personal',completed:false,createdAt:new Date().toISOString(),importance:'low',days:[1,2,3,4,5,6,7]},{id:'4',title:'Meditation session',description:'15 minutes of mindfulness meditation',dueDate:new Date().toISOString().split('T')[0],category:'Personal',completed:false,createdAt:new Date().toISOString(),importance:'medium',days:[1,2,3,4,5,6,7]},// Work tasks\n{id:'5',title:'Weekly team meeting',description:'Discuss project progress and roadblocks',dueDate:new Date(Date.now()+86400000).toISOString().split('T')[0],category:'Work',completed:false,createdAt:new Date().toISOString(),importance:'high',days:[2]},{id:'6',title:'Complete project proposal',description:'Finalize the budget and timeline',dueDate:new Date(Date.now()+259200000).toISOString().split('T')[0],category:'Work',completed:false,createdAt:new Date().toISOString(),importance:'high',days:[1,2,3,4,5]},{id:'7',title:'Review code changes',description:'Check pull requests from the development team',dueDate:new Date().toISOString().split('T')[0],category:'Work',completed:false,createdAt:new Date().toISOString(),importance:'medium',days:[1,3,5]},{id:'8',title:'Update documentation',description:'Add new features to the user guide',dueDate:new Date(Date.now()+172800000).toISOString().split('T')[0],category:'Work',completed:false,createdAt:new Date().toISOString(),importance:'low',days:[4]},// Home tasks\n{id:'9',title:'Clean the kitchen',description:'Wash dishes and wipe counters',dueDate:new Date().toISOString().split('T')[0],category:'Home',completed:false,createdAt:new Date().toISOString(),importance:'medium',days:[1,4,7]},{id:'10',title:'Do laundry',description:'Wash, dry, and fold clothes',dueDate:new Date(Date.now()+86400000).toISOString().split('T')[0],category:'Home',completed:false,createdAt:new Date().toISOString(),importance:'medium',days:[6]},{id:'11',title:'Pay utility bills',description:'Electricity, water, and internet',dueDate:new Date(Date.now()+345600000).toISOString().split('T')[0],category:'Home',completed:false,createdAt:new Date().toISOString(),importance:'high',days:[5]},{id:'12',title:'Organize closet',description:'Sort clothes and donate unused items',dueDate:new Date(Date.now()+259200000).toISOString().split('T')[0],category:'Home',completed:false,createdAt:new Date().toISOString(),importance:'low',days:[7]},// Friends tasks\n{id:'13',title:'Call Sarah',description:'Catch up and plan weekend meetup',dueDate:new Date().toISOString().split('T')[0],category:'Friends',completed:false,createdAt:new Date().toISOString(),importance:'medium',days:[3]},{id:'14',title:'Plan birthday party',description:'Organize surprise party for Alex',dueDate:new Date(Date.now()+604800000).toISOString().split('T')[0],category:'Friends',completed:false,createdAt:new Date().toISOString(),importance:'high',days:[2,4]},{id:'15',title:'Movie night',description:'Watch new Marvel movie with friends',dueDate:new Date(Date.now()+432000000).toISOString().split('T')[0],category:'Friends',completed:false,createdAt:new Date().toISOString(),importance:'low',days:[5]},{id:'16',title:'Coffee meetup',description:'Meet with college friends at Starbucks',dueDate:new Date(Date.now()+172800000).toISOString().split('T')[0],category:'Friends',completed:false,createdAt:new Date().toISOString(),importance:'medium',days:[6]},// Family tasks\n{id:'17',title:'Family dinner',description:'Cook special meal for everyone',dueDate:new Date(Date.now()+86400000).toISOString().split('T')[0],category:'Family',completed:false,createdAt:new Date().toISOString(),importance:'high',days:[7]},{id:'18',title:'Help mom with shopping',description:'Drive mom to the mall',dueDate:new Date(Date.now()+259200000).toISOString().split('T')[0],category:'Family',completed:false,createdAt:new Date().toISOString(),importance:'medium',days:[6]},{id:'19',title:'Call grandparents',description:'Weekly check-in call',dueDate:new Date().toISOString().split('T')[0],category:'Family',completed:false,createdAt:new Date().toISOString(),importance:'high',days:[7]},{id:'20',title:'Plan family vacation',description:'Research destinations and accommodations',dueDate:new Date(Date.now()+1209600000).toISOString().split('T')[0],category:'Family',completed:false,createdAt:new Date().toISOString(),importance:'low',days:[1,3]}];return sampleTasks;});// Add state to track the last date the streak was updated\nconst[lastStreakDate,setLastStreakDate]=useState(()=>{const saved=localStorage.getItem('plannr_last_streak_date');return saved||'';});// Save lastStreakDate to localStorage whenever it changes\nuseEffect(()=>{if(lastStreakDate){localStorage.setItem('plannr_last_streak_date',lastStreakDate);}},[lastStreakDate]);useEffect(()=>{localStorage.setItem('plannr_tasks',JSON.stringify(tasks));},[tasks]);const addTask=task=>{// Check if a task with the same title AND category already exists\nconst existingTaskIndex=tasks.findIndex(t=>t.title===task.title&&t.category===task.category);if(existingTaskIndex!==-1){// Update the existing task\nconst updatedTasks=[...tasks];updatedTasks[existingTaskIndex]={...updatedTasks[existingTaskIndex],...task,// Preserve the original id and createdAt\nid:updatedTasks[existingTaskIndex].id,createdAt:updatedTasks[existingTaskIndex].createdAt};setTasks(updatedTasks);}else{// Create a new task\nconst newTask={...task,id:Date.now().toString(),createdAt:new Date().toISOString()};setTasks(prevTasks=>[...prevTasks,newTask]);}};const updateTask=(id,updatedTask)=>{setTasks(prevTasks=>{const newTasks=prevTasks.map(task=>task.id===id?{...task,...updatedTask}:task);localStorage.setItem('plannr_tasks',JSON.stringify(newTasks));return newTasks;});};const deleteTask=id=>{setTasks(prevTasks=>prevTasks.filter(task=>task.id!==id));};const completeTask=id=>{setTasks(prevTasks=>{const newTasks=prevTasks.map(task=>task.id===id?{...task,completed:true,completedAt:new Date().toISOString()}:task);localStorage.setItem('plannr_tasks',JSON.stringify(newTasks));return newTasks;});// Update user stats\nif(user){const completedTasks=user.tasksCompleted+1;// Calculate achievements using exponential formula\n// Level 1: 5 tasks, Level 2: 10 tasks, Level 3: 20 tasks, Level 4: 40 tasks, etc.\nlet achievementLevel=0;let threshold=5;while(completedTasks>=threshold){achievementLevel++;threshold=5*Math.pow(2,achievementLevel);}// Update task completion stats (streak will be updated by the checkAllTasksCompleted effect)\nupdateProfile({tasksCompleted:completedTasks,achievements:achievementLevel});// The streak will be updated by the checkAllTasksCompleted effect\n// which runs whenever tasks change\n}};const getTodayTasks=()=>{const today=new Date();today.setHours(0,0,0,0);return tasks.filter(task=>{const taskDate=new Date(task.dueDate);taskDate.setHours(0,0,0,0);return taskDate.getTime()===today.getTime()&&!task.completed;});};const getUpcomingTasks=()=>{const today=new Date();today.setHours(0,0,0,0);return tasks.filter(task=>{const taskDate=new Date(task.dueDate);taskDate.setHours(0,0,0,0);return taskDate.getTime()>today.getTime()&&!task.completed;}).sort((a,b)=>new Date(a.dueDate).getTime()-new Date(b.dueDate).getTime());};const getTasksByCategory=category=>{return tasks.filter(task=>task.category===category&&!task.completed);};const getTasksForNextDays=days=>{const result={};const today=new Date();for(let i=0;i<days;i++){const date=new Date(today);date.setDate(today.getDate()+i);date.setHours(0,0,0,0);const dateStr=date.toISOString().split('T')[0];result[dateStr]=tasks.filter(task=>{const taskDate=new Date(task.dueDate);taskDate.setHours(0,0,0,0);return taskDate.getTime()===date.getTime()&&!task.completed;});}return result;};const addTaskToToday=task=>{// Create a new task based on the template but for today\nconst today=new Date().toISOString().split('T')[0];const newTask={title:task.title,description:task.description,dueDate:today,category:task.category,completed:false,importance:task.importance,days:task.days};addTask(newTask);};// Add a function to check if the streak should be reset\nconst checkAndResetStreak=()=>{if(!user)return;const today=new Date();today.setHours(0,0,0,0);const todayStr=today.toISOString().split('T')[0];// If lastStreakDate is empty, initialize it to today\nif(!lastStreakDate){setLastStreakDate(todayStr);return;}// Check if a day was missed\nconst lastDate=new Date(lastStreakDate);lastDate.setHours(0,0,0,0);const yesterday=new Date(today);yesterday.setDate(yesterday.getDate()-1);yesterday.setHours(0,0,0,0);// If the last streak date is before yesterday, reset the streak\nif(lastDate.getTime()<yesterday.getTime()){console.log('Streak reset due to missed day',{lastStreakDate,yesterday:yesterday.toISOString().split('T')[0],today:todayStr});updateProfile({streak:0});// Update lastStreakDate to today to prevent multiple resets\nsetLastStreakDate(todayStr);}};// Check streak on component mount and when user changes\nuseEffect(()=>{if(user){checkAndResetStreak();}},[user,lastStreakDate]);// Add a function to check if all tasks for today are completed\nconst checkAllTasksCompleted=()=>{if(!user)return;const today=new Date();today.setHours(0,0,0,0);const todayStr=today.toISOString().split('T')[0];const todaysTasks=tasks.filter(task=>{const taskDate=new Date(task.dueDate);taskDate.setHours(0,0,0,0);return taskDate.getTime()===today.getTime();});// If there are no tasks for today, don't update the streak\nif(todaysTasks.length===0)return;const allCompleted=todaysTasks.every(task=>task.completed);// If all tasks are completed and we haven't updated the streak today\nif(allCompleted&&lastStreakDate!==todayStr){const newStreak=user.streak+1;console.log('All tasks completed! Updating streak',{previousStreak:user.streak,newStreak,tasksCount:todaysTasks.length});updateProfile({streak:newStreak});setLastStreakDate(todayStr);}};// Check if all tasks are completed whenever tasks change\nuseEffect(()=>{if(user){checkAllTasksCompleted();}},[tasks,user,lastStreakDate]);// Add a function to manually update the streak for testing\nconst forceUpdateStreak=newStreak=>{if(user){console.log('Manually updating streak',{previousStreak:user.streak,newStreak});updateProfile({streak:newStreak});// Update lastStreakDate to today\nconst today=new Date().toISOString().split('T')[0];setLastStreakDate(today);}};const contextValue={tasks,addTask,updateTask,deleteTask,completeTask,getTodayTasks,getUpcomingTasks,getTasksByCategory,getTasksForNextDays,addTaskToToday,forceUpdateStreak};return/*#__PURE__*/_jsx(TaskContext.Provider,{value:contextValue,children:children});};export const useTask=()=>{const context=useContext(TaskContext);if(context===undefined){throw new Error('useTask must be used within a TaskProvider');}return context;};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useAuth","jsx","_jsx","TaskContext","undefined","TaskProvider","_ref","children","user","updateProfile","tasks","setTasks","savedTasks","localStorage","getItem","JSON","parse","sampleTasks","id","title","description","dueDate","Date","toISOString","split","category","completed","createdAt","importance","days","now","lastStreakDate","setLastStreakDate","saved","setItem","stringify","addTask","task","existingTaskIndex","findIndex","t","updatedTasks","newTask","toString","prevTasks","updateTask","updatedTask","newTasks","map","deleteTask","filter","completeTask","completedAt","completedTasks","tasksCompleted","achievementLevel","threshold","Math","pow","achievements","getTodayTasks","today","setHours","taskDate","getTime","getUpcomingTasks","sort","a","b","getTasksByCategory","getTasksForNextDays","result","i","date","setDate","getDate","dateStr","addTaskToToday","checkAndResetStreak","todayStr","lastDate","yesterday","console","log","streak","checkAllTasksCompleted","todaysTasks","length","allCompleted","every","newStreak","previousStreak","tasksCount","forceUpdateStreak","contextValue","Provider","value","useTask","context","Error"],"sources":["C:/Users/User/Desktop/Plannr/src/contexts/TaskContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\nimport { useAuth } from './AuthContext';\r\n\r\nexport type TaskCategory = 'Personal' | 'Work' | 'Home' | 'Friends' | 'Family';\r\n\r\nexport interface Task {\r\n  id: string;\r\n  title: string;\r\n  description?: string;\r\n  dueDate: string;\r\n  category: TaskCategory;\r\n  completed: boolean;\r\n  createdAt: string;\r\n  completedAt?: string;\r\n  importance?: 'low' | 'medium' | 'high';\r\n  days?: number[];\r\n}\r\n\r\ninterface TaskContextType {\r\n  tasks: Task[];\r\n  addTask: (task: Omit<Task, 'id' | 'createdAt'>) => void;\r\n  updateTask: (id: string, task: Partial<Task>) => void;\r\n  deleteTask: (id: string) => void;\r\n  completeTask: (id: string) => void;\r\n  getTodayTasks: () => Task[];\r\n  getUpcomingTasks: () => Task[];\r\n  getTasksByCategory: (category: TaskCategory) => Task[];\r\n  getTasksForNextDays: (days: number) => Record<string, Task[]>;\r\n  addTaskToToday: (task: Task) => void;\r\n  forceUpdateStreak: (newStreak: number) => void;\r\n}\r\n\r\nconst TaskContext = createContext<TaskContextType | undefined>(undefined);\r\n\r\ninterface TaskProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const TaskProvider: React.FC<TaskProviderProps> = ({ children }) => {\r\n  const { user, updateProfile } = useAuth();\r\n  const [tasks, setTasks] = useState<Task[]>(() => {\r\n    const savedTasks = localStorage.getItem('plannr_tasks');\r\n    if (savedTasks) {\r\n      return JSON.parse(savedTasks);\r\n    }\r\n    \r\n    // Sample tasks\r\n    const sampleTasks: Task[] = [\r\n      // Personal tasks\r\n      {\r\n        id: '1',\r\n        title: 'Morning workout routine',\r\n        description: '30 minutes of cardio and strength training',\r\n        dueDate: new Date().toISOString().split('T')[0],\r\n        category: 'Personal',\r\n        completed: false,\r\n        createdAt: new Date().toISOString(),\r\n        importance: 'high',\r\n        days: [1, 3, 5]\r\n      },\r\n      {\r\n        id: '2',\r\n        title: 'Grocery shopping',\r\n        description: 'Buy fruits, vegetables, and other essentials',\r\n        dueDate: new Date(Date.now() + 86400000).toISOString().split('T')[0],\r\n        category: 'Personal',\r\n        completed: false,\r\n        createdAt: new Date().toISOString(),\r\n        importance: 'medium',\r\n        days: [2, 5]\r\n      },\r\n      {\r\n        id: '3',\r\n        title: 'Read a book',\r\n        description: 'Continue reading \"Atomic Habits\"',\r\n        dueDate: new Date(Date.now() + 172800000).toISOString().split('T')[0],\r\n        category: 'Personal',\r\n        completed: false,\r\n        createdAt: new Date().toISOString(),\r\n        importance: 'low',\r\n        days: [1, 2, 3, 4, 5, 6, 7]\r\n      },\r\n      {\r\n        id: '4',\r\n        title: 'Meditation session',\r\n        description: '15 minutes of mindfulness meditation',\r\n        dueDate: new Date().toISOString().split('T')[0],\r\n        category: 'Personal',\r\n        completed: false,\r\n        createdAt: new Date().toISOString(),\r\n        importance: 'medium',\r\n        days: [1, 2, 3, 4, 5, 6, 7]\r\n      },\r\n      \r\n      // Work tasks\r\n      {\r\n        id: '5',\r\n        title: 'Weekly team meeting',\r\n        description: 'Discuss project progress and roadblocks',\r\n        dueDate: new Date(Date.now() + 86400000).toISOString().split('T')[0],\r\n        category: 'Work',\r\n        completed: false,\r\n        createdAt: new Date().toISOString(),\r\n        importance: 'high',\r\n        days: [2]\r\n      },\r\n      {\r\n        id: '6',\r\n        title: 'Complete project proposal',\r\n        description: 'Finalize the budget and timeline',\r\n        dueDate: new Date(Date.now() + 259200000).toISOString().split('T')[0],\r\n        category: 'Work',\r\n        completed: false,\r\n        createdAt: new Date().toISOString(),\r\n        importance: 'high',\r\n        days: [1, 2, 3, 4, 5]\r\n      },\r\n      {\r\n        id: '7',\r\n        title: 'Review code changes',\r\n        description: 'Check pull requests from the development team',\r\n        dueDate: new Date().toISOString().split('T')[0],\r\n        category: 'Work',\r\n        completed: false,\r\n        createdAt: new Date().toISOString(),\r\n        importance: 'medium',\r\n        days: [1, 3, 5]\r\n      },\r\n      {\r\n        id: '8',\r\n        title: 'Update documentation',\r\n        description: 'Add new features to the user guide',\r\n        dueDate: new Date(Date.now() + 172800000).toISOString().split('T')[0],\r\n        category: 'Work',\r\n        completed: false,\r\n        createdAt: new Date().toISOString(),\r\n        importance: 'low',\r\n        days: [4]\r\n      },\r\n      \r\n      // Home tasks\r\n      {\r\n        id: '9',\r\n        title: 'Clean the kitchen',\r\n        description: 'Wash dishes and wipe counters',\r\n        dueDate: new Date().toISOString().split('T')[0],\r\n        category: 'Home',\r\n        completed: false,\r\n        createdAt: new Date().toISOString(),\r\n        importance: 'medium',\r\n        days: [1, 4, 7]\r\n      },\r\n      {\r\n        id: '10',\r\n        title: 'Do laundry',\r\n        description: 'Wash, dry, and fold clothes',\r\n        dueDate: new Date(Date.now() + 86400000).toISOString().split('T')[0],\r\n        category: 'Home',\r\n        completed: false,\r\n        createdAt: new Date().toISOString(),\r\n        importance: 'medium',\r\n        days: [6]\r\n      },\r\n      {\r\n        id: '11',\r\n        title: 'Pay utility bills',\r\n        description: 'Electricity, water, and internet',\r\n        dueDate: new Date(Date.now() + 345600000).toISOString().split('T')[0],\r\n        category: 'Home',\r\n        completed: false,\r\n        createdAt: new Date().toISOString(),\r\n        importance: 'high',\r\n        days: [5]\r\n      },\r\n      {\r\n        id: '12',\r\n        title: 'Organize closet',\r\n        description: 'Sort clothes and donate unused items',\r\n        dueDate: new Date(Date.now() + 259200000).toISOString().split('T')[0],\r\n        category: 'Home',\r\n        completed: false,\r\n        createdAt: new Date().toISOString(),\r\n        importance: 'low',\r\n        days: [7]\r\n      },\r\n      \r\n      // Friends tasks\r\n      {\r\n        id: '13',\r\n        title: 'Call Sarah',\r\n        description: 'Catch up and plan weekend meetup',\r\n        dueDate: new Date().toISOString().split('T')[0],\r\n        category: 'Friends',\r\n        completed: false,\r\n        createdAt: new Date().toISOString(),\r\n        importance: 'medium',\r\n        days: [3]\r\n      },\r\n      {\r\n        id: '14',\r\n        title: 'Plan birthday party',\r\n        description: 'Organize surprise party for Alex',\r\n        dueDate: new Date(Date.now() + 604800000).toISOString().split('T')[0],\r\n        category: 'Friends',\r\n        completed: false,\r\n        createdAt: new Date().toISOString(),\r\n        importance: 'high',\r\n        days: [2, 4]\r\n      },\r\n      {\r\n        id: '15',\r\n        title: 'Movie night',\r\n        description: 'Watch new Marvel movie with friends',\r\n        dueDate: new Date(Date.now() + 432000000).toISOString().split('T')[0],\r\n        category: 'Friends',\r\n        completed: false,\r\n        createdAt: new Date().toISOString(),\r\n        importance: 'low',\r\n        days: [5]\r\n      },\r\n      {\r\n        id: '16',\r\n        title: 'Coffee meetup',\r\n        description: 'Meet with college friends at Starbucks',\r\n        dueDate: new Date(Date.now() + 172800000).toISOString().split('T')[0],\r\n        category: 'Friends',\r\n        completed: false,\r\n        createdAt: new Date().toISOString(),\r\n        importance: 'medium',\r\n        days: [6]\r\n      },\r\n      \r\n      // Family tasks\r\n      {\r\n        id: '17',\r\n        title: 'Family dinner',\r\n        description: 'Cook special meal for everyone',\r\n        dueDate: new Date(Date.now() + 86400000).toISOString().split('T')[0],\r\n        category: 'Family',\r\n        completed: false,\r\n        createdAt: new Date().toISOString(),\r\n        importance: 'high',\r\n        days: [7]\r\n      },\r\n      {\r\n        id: '18',\r\n        title: 'Help mom with shopping',\r\n        description: 'Drive mom to the mall',\r\n        dueDate: new Date(Date.now() + 259200000).toISOString().split('T')[0],\r\n        category: 'Family',\r\n        completed: false,\r\n        createdAt: new Date().toISOString(),\r\n        importance: 'medium',\r\n        days: [6]\r\n      },\r\n      {\r\n        id: '19',\r\n        title: 'Call grandparents',\r\n        description: 'Weekly check-in call',\r\n        dueDate: new Date().toISOString().split('T')[0],\r\n        category: 'Family',\r\n        completed: false,\r\n        createdAt: new Date().toISOString(),\r\n        importance: 'high',\r\n        days: [7]\r\n      },\r\n      {\r\n        id: '20',\r\n        title: 'Plan family vacation',\r\n        description: 'Research destinations and accommodations',\r\n        dueDate: new Date(Date.now() + 1209600000).toISOString().split('T')[0],\r\n        category: 'Family',\r\n        completed: false,\r\n        createdAt: new Date().toISOString(),\r\n        importance: 'low',\r\n        days: [1, 3]\r\n      }\r\n    ];\r\n    \r\n    return sampleTasks;\r\n  });\r\n\r\n  // Add state to track the last date the streak was updated\r\n  const [lastStreakDate, setLastStreakDate] = useState<string>(() => {\r\n    const saved = localStorage.getItem('plannr_last_streak_date');\r\n    return saved || '';\r\n  });\r\n  \r\n  // Save lastStreakDate to localStorage whenever it changes\r\n  useEffect(() => {\r\n    if (lastStreakDate) {\r\n      localStorage.setItem('plannr_last_streak_date', lastStreakDate);\r\n    }\r\n  }, [lastStreakDate]);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('plannr_tasks', JSON.stringify(tasks));\r\n  }, [tasks]);\r\n\r\n  const addTask = (task: Omit<Task, 'id' | 'createdAt'>) => {\r\n    // Check if a task with the same title AND category already exists\r\n    const existingTaskIndex = tasks.findIndex(t => \r\n      t.title === task.title && \r\n      t.category === task.category\r\n    );\r\n    \r\n    if (existingTaskIndex !== -1) {\r\n      // Update the existing task\r\n      const updatedTasks = [...tasks];\r\n      updatedTasks[existingTaskIndex] = {\r\n        ...updatedTasks[existingTaskIndex],\r\n        ...task,\r\n        // Preserve the original id and createdAt\r\n        id: updatedTasks[existingTaskIndex].id,\r\n        createdAt: updatedTasks[existingTaskIndex].createdAt\r\n      };\r\n      setTasks(updatedTasks);\r\n    } else {\r\n      // Create a new task\r\n      const newTask: Task = {\r\n        ...task,\r\n        id: Date.now().toString(),\r\n        createdAt: new Date().toISOString(),\r\n      };\r\n      setTasks(prevTasks => [...prevTasks, newTask]);\r\n    }\r\n  };\r\n\r\n  const updateTask = (id: string, updatedTask: Partial<Task>) => {\r\n    setTasks(prevTasks => {\r\n      const newTasks = prevTasks.map(task => \r\n        task.id === id ? { ...task, ...updatedTask } : task\r\n      );\r\n      localStorage.setItem('plannr_tasks', JSON.stringify(newTasks));\r\n      return newTasks;\r\n    });\r\n  };\r\n\r\n  const deleteTask = (id: string) => {\r\n    setTasks(prevTasks => prevTasks.filter(task => task.id !== id));\r\n  };\r\n\r\n  const completeTask = (id: string) => {\r\n    setTasks(prevTasks => {\r\n      const newTasks = prevTasks.map(task => \r\n        task.id === id ? { \r\n          ...task, \r\n          completed: true,\r\n          completedAt: new Date().toISOString()\r\n        } : task\r\n      );\r\n      localStorage.setItem('plannr_tasks', JSON.stringify(newTasks));\r\n      return newTasks;\r\n    });\r\n    \r\n    // Update user stats\r\n    if (user) {\r\n      const completedTasks = user.tasksCompleted + 1;\r\n      \r\n      // Calculate achievements using exponential formula\r\n      // Level 1: 5 tasks, Level 2: 10 tasks, Level 3: 20 tasks, Level 4: 40 tasks, etc.\r\n      let achievementLevel = 0;\r\n      let threshold = 5;\r\n      \r\n      while (completedTasks >= threshold) {\r\n        achievementLevel++;\r\n        threshold = 5 * Math.pow(2, achievementLevel);\r\n      }\r\n      \r\n      // Update task completion stats (streak will be updated by the checkAllTasksCompleted effect)\r\n      updateProfile({\r\n        tasksCompleted: completedTasks,\r\n        achievements: achievementLevel\r\n      });\r\n      \r\n      // The streak will be updated by the checkAllTasksCompleted effect\r\n      // which runs whenever tasks change\r\n    }\r\n  };\r\n\r\n  const getTodayTasks = () => {\r\n    const today = new Date();\r\n    today.setHours(0, 0, 0, 0);\r\n    \r\n    return tasks.filter(task => {\r\n      const taskDate = new Date(task.dueDate);\r\n      taskDate.setHours(0, 0, 0, 0);\r\n      return taskDate.getTime() === today.getTime() && !task.completed;\r\n    });\r\n  };\r\n\r\n  const getUpcomingTasks = () => {\r\n    const today = new Date();\r\n    today.setHours(0, 0, 0, 0);\r\n    \r\n    return tasks.filter(task => {\r\n      const taskDate = new Date(task.dueDate);\r\n      taskDate.setHours(0, 0, 0, 0);\r\n      return taskDate.getTime() > today.getTime() && !task.completed;\r\n    }).sort((a, b) => new Date(a.dueDate).getTime() - new Date(b.dueDate).getTime());\r\n  };\r\n\r\n  const getTasksByCategory = (category: TaskCategory) => {\r\n    return tasks.filter(task => task.category === category && !task.completed);\r\n  };\r\n\r\n  const getTasksForNextDays = (days: number) => {\r\n    const result: Record<string, Task[]> = {};\r\n    const today = new Date();\r\n    \r\n    for (let i = 0; i < days; i++) {\r\n      const date = new Date(today);\r\n      date.setDate(today.getDate() + i);\r\n      date.setHours(0, 0, 0, 0);\r\n      \r\n      const dateStr = date.toISOString().split('T')[0];\r\n      \r\n      result[dateStr] = tasks.filter(task => {\r\n        const taskDate = new Date(task.dueDate);\r\n        taskDate.setHours(0, 0, 0, 0);\r\n        return taskDate.getTime() === date.getTime() && !task.completed;\r\n      });\r\n    }\r\n    \r\n    return result;\r\n  };\r\n\r\n  const addTaskToToday = (task: Task) => {\r\n    // Create a new task based on the template but for today\r\n    const today = new Date().toISOString().split('T')[0];\r\n    \r\n    const newTask: Omit<Task, 'id' | 'createdAt'> = {\r\n      title: task.title,\r\n      description: task.description,\r\n      dueDate: today,\r\n      category: task.category,\r\n      completed: false,\r\n      importance: task.importance,\r\n      days: task.days\r\n    };\r\n    \r\n    addTask(newTask);\r\n  };\r\n\r\n  // Add a function to check if the streak should be reset\r\n  const checkAndResetStreak = () => {\r\n    if (!user) return;\r\n    \r\n    const today = new Date();\r\n    today.setHours(0, 0, 0, 0);\r\n    const todayStr = today.toISOString().split('T')[0];\r\n    \r\n    // If lastStreakDate is empty, initialize it to today\r\n    if (!lastStreakDate) {\r\n      setLastStreakDate(todayStr);\r\n      return;\r\n    }\r\n    \r\n    // Check if a day was missed\r\n    const lastDate = new Date(lastStreakDate);\r\n    lastDate.setHours(0, 0, 0, 0);\r\n    \r\n    const yesterday = new Date(today);\r\n    yesterday.setDate(yesterday.getDate() - 1);\r\n    yesterday.setHours(0, 0, 0, 0);\r\n    \r\n    // If the last streak date is before yesterday, reset the streak\r\n    if (lastDate.getTime() < yesterday.getTime()) {\r\n      console.log('Streak reset due to missed day', {\r\n        lastStreakDate,\r\n        yesterday: yesterday.toISOString().split('T')[0],\r\n        today: todayStr\r\n      });\r\n      \r\n      updateProfile({\r\n        streak: 0\r\n      });\r\n      \r\n      // Update lastStreakDate to today to prevent multiple resets\r\n      setLastStreakDate(todayStr);\r\n    }\r\n  };\r\n  \r\n  // Check streak on component mount and when user changes\r\n  useEffect(() => {\r\n    if (user) {\r\n      checkAndResetStreak();\r\n    }\r\n  }, [user, lastStreakDate]);\r\n\r\n  // Add a function to check if all tasks for today are completed\r\n  const checkAllTasksCompleted = () => {\r\n    if (!user) return;\r\n    \r\n    const today = new Date();\r\n    today.setHours(0, 0, 0, 0);\r\n    const todayStr = today.toISOString().split('T')[0];\r\n    \r\n    const todaysTasks = tasks.filter(task => {\r\n      const taskDate = new Date(task.dueDate);\r\n      taskDate.setHours(0, 0, 0, 0);\r\n      return taskDate.getTime() === today.getTime();\r\n    });\r\n    \r\n    // If there are no tasks for today, don't update the streak\r\n    if (todaysTasks.length === 0) return;\r\n    \r\n    const allCompleted = todaysTasks.every(task => task.completed);\r\n    \r\n    // If all tasks are completed and we haven't updated the streak today\r\n    if (allCompleted && lastStreakDate !== todayStr) {\r\n      const newStreak = user.streak + 1;\r\n      \r\n      console.log('All tasks completed! Updating streak', {\r\n        previousStreak: user.streak,\r\n        newStreak,\r\n        tasksCount: todaysTasks.length\r\n      });\r\n      \r\n      updateProfile({\r\n        streak: newStreak\r\n      });\r\n      \r\n      setLastStreakDate(todayStr);\r\n    }\r\n  };\r\n  \r\n  // Check if all tasks are completed whenever tasks change\r\n  useEffect(() => {\r\n    if (user) {\r\n      checkAllTasksCompleted();\r\n    }\r\n  }, [tasks, user, lastStreakDate]);\r\n\r\n  // Add a function to manually update the streak for testing\r\n  const forceUpdateStreak = (newStreak: number) => {\r\n    if (user) {\r\n      console.log('Manually updating streak', {\r\n        previousStreak: user.streak,\r\n        newStreak\r\n      });\r\n      \r\n      updateProfile({\r\n        streak: newStreak\r\n      });\r\n      \r\n      // Update lastStreakDate to today\r\n      const today = new Date().toISOString().split('T')[0];\r\n      setLastStreakDate(today);\r\n    }\r\n  };\r\n\r\n  const contextValue: TaskContextType = {\r\n    tasks,\r\n    addTask,\r\n    updateTask,\r\n    deleteTask,\r\n    completeTask,\r\n    getTodayTasks,\r\n    getUpcomingTasks,\r\n    getTasksByCategory,\r\n    getTasksForNextDays,\r\n    addTaskToToday,\r\n    forceUpdateStreak\r\n  };\r\n\r\n  return (\r\n    <TaskContext.Provider value={contextValue}>\r\n      {children}\r\n    </TaskContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useTask = (): TaskContextType => {\r\n  const context = useContext(TaskContext);\r\n  if (context === undefined) {\r\n    throw new Error('useTask must be used within a TaskProvider');\r\n  }\r\n  return context;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}