{"ast":null,"code":"import{getTasks,getUser,saveTasks,saveUser,saveLastStreakDate}from'./storage';/**\r\n * Exports all user data to a JSON file\r\n */export const exportData=()=>{try{const data={version:'1.0',exportDate:new Date().toISOString(),user:getUser(),tasks:getTasks()};const dataStr=JSON.stringify(data,null,2);const dataUri=`data:application/json;charset=utf-8,${encodeURIComponent(dataStr)}`;const exportFileDefaultName=`plannr-backup-${new Date().toISOString().split('T')[0]}.json`;const linkElement=document.createElement('a');linkElement.setAttribute('href',dataUri);linkElement.setAttribute('download',exportFileDefaultName);linkElement.click();}catch(error){console.error('Error exporting data:',error);alert('Failed to export data. Please try again.');}};/**\r\n * Imports user data from a JSON file\r\n * @param jsonString The JSON string to import\r\n * @returns A result object indicating success or failure\r\n */export const importData=jsonString=>{try{const data=JSON.parse(jsonString);// Validate the data structure\nif(!data.version||!data.exportDate){return{success:false,message:'Invalid backup file format. Missing version or export date.'};}// Import tasks\nif(Array.isArray(data.tasks)){saveTasks(data.tasks);}else{return{success:false,message:'Invalid tasks data in backup file.'};}// Import user data\nif(data.user){saveUser(data.user);// Set last streak date to today to prevent streak reset\nconst today=new Date().toISOString().split('T')[0];saveLastStreakDate(today);}return{success:true,message:'Data imported successfully! Refreshing page...'};}catch(error){console.error('Error importing data:',error);return{success:false,message:'Failed to import data. The file may be corrupted.'};}};/**\r\n * Handles file selection for import\r\n * @param file The selected file\r\n * @returns A promise that resolves with the import result\r\n */export const handleFileImport=file=>{return new Promise(resolve=>{if(file.type!=='application/json'){resolve({success:false,message:'Please select a JSON file.'});return;}const reader=new FileReader();reader.onload=e=>{var _e$target;const result=(_e$target=e.target)===null||_e$target===void 0?void 0:_e$target.result;if(typeof result==='string'){const importResult=importData(result);resolve(importResult);}else{resolve({success:false,message:'Failed to read file. Please try again.'});}};reader.onerror=()=>{resolve({success:false,message:'Error reading file. Please try again.'});};reader.readAsText(file);});};","map":{"version":3,"names":["getTasks","getUser","saveTasks","saveUser","saveLastStreakDate","exportData","data","version","exportDate","Date","toISOString","user","tasks","dataStr","JSON","stringify","dataUri","encodeURIComponent","exportFileDefaultName","split","linkElement","document","createElement","setAttribute","click","error","console","alert","importData","jsonString","parse","success","message","Array","isArray","today","handleFileImport","file","Promise","resolve","type","reader","FileReader","onload","e","_e$target","result","target","importResult","onerror","readAsText"],"sources":["C:/Users/User/Desktop/Plannr-new/src/utils/dataExport.ts"],"sourcesContent":["import { Task } from '../contexts/TaskContext';\r\nimport { User } from '../contexts/AuthContext';\r\nimport { getTasks, getUser, saveTasks, saveUser, saveLastStreakDate } from './storage';\r\n\r\ninterface ExportData {\r\n  version: string;\r\n  exportDate: string;\r\n  user: User | null;\r\n  tasks: Task[];\r\n}\r\n\r\n/**\r\n * Exports all user data to a JSON file\r\n */\r\nexport const exportData = (): void => {\r\n  try {\r\n    const data: ExportData = {\r\n      version: '1.0',\r\n      exportDate: new Date().toISOString(),\r\n      user: getUser(),\r\n      tasks: getTasks()\r\n    };\r\n    \r\n    const dataStr = JSON.stringify(data, null, 2);\r\n    const dataUri = `data:application/json;charset=utf-8,${encodeURIComponent(dataStr)}`;\r\n    \r\n    const exportFileDefaultName = `plannr-backup-${new Date().toISOString().split('T')[0]}.json`;\r\n    \r\n    const linkElement = document.createElement('a');\r\n    linkElement.setAttribute('href', dataUri);\r\n    linkElement.setAttribute('download', exportFileDefaultName);\r\n    linkElement.click();\r\n  } catch (error) {\r\n    console.error('Error exporting data:', error);\r\n    alert('Failed to export data. Please try again.');\r\n  }\r\n};\r\n\r\n/**\r\n * Imports user data from a JSON file\r\n * @param jsonString The JSON string to import\r\n * @returns A result object indicating success or failure\r\n */\r\nexport const importData = (jsonString: string): { success: boolean; message: string } => {\r\n  try {\r\n    const data = JSON.parse(jsonString) as ExportData;\r\n    \r\n    // Validate the data structure\r\n    if (!data.version || !data.exportDate) {\r\n      return { \r\n        success: false, \r\n        message: 'Invalid backup file format. Missing version or export date.' \r\n      };\r\n    }\r\n    \r\n    // Import tasks\r\n    if (Array.isArray(data.tasks)) {\r\n      saveTasks(data.tasks);\r\n    } else {\r\n      return { \r\n        success: false, \r\n        message: 'Invalid tasks data in backup file.' \r\n      };\r\n    }\r\n    \r\n    // Import user data\r\n    if (data.user) {\r\n      saveUser(data.user);\r\n      \r\n      // Set last streak date to today to prevent streak reset\r\n      const today = new Date().toISOString().split('T')[0];\r\n      saveLastStreakDate(today);\r\n    }\r\n    \r\n    return { \r\n      success: true, \r\n      message: 'Data imported successfully! Refreshing page...' \r\n    };\r\n  } catch (error) {\r\n    console.error('Error importing data:', error);\r\n    return { \r\n      success: false, \r\n      message: 'Failed to import data. The file may be corrupted.' \r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Handles file selection for import\r\n * @param file The selected file\r\n * @returns A promise that resolves with the import result\r\n */\r\nexport const handleFileImport = (file: File): Promise<{ success: boolean; message: string }> => {\r\n  return new Promise((resolve) => {\r\n    if (file.type !== 'application/json') {\r\n      resolve({ \r\n        success: false, \r\n        message: 'Please select a JSON file.' \r\n      });\r\n      return;\r\n    }\r\n    \r\n    const reader = new FileReader();\r\n    \r\n    reader.onload = (e) => {\r\n      const result = e.target?.result;\r\n      if (typeof result === 'string') {\r\n        const importResult = importData(result);\r\n        resolve(importResult);\r\n      } else {\r\n        resolve({ \r\n          success: false, \r\n          message: 'Failed to read file. Please try again.' \r\n        });\r\n      }\r\n    };\r\n    \r\n    reader.onerror = () => {\r\n      resolve({ \r\n        success: false, \r\n        message: 'Error reading file. Please try again.' \r\n      });\r\n    };\r\n    \r\n    reader.readAsText(file);\r\n  });\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}