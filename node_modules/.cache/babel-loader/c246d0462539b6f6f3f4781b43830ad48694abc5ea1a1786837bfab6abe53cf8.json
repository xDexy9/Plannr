{"ast":null,"code":"import { getTasks, getUser, saveTasks, saveUser, saveLastStreakDate } from './storage';\n/**\r\n * Exports all user data to a JSON file\r\n */\nexport const exportData = () => {\n  try {\n    const data = {\n      version: '1.0',\n      exportDate: new Date().toISOString(),\n      user: getUser(),\n      tasks: getTasks()\n    };\n    const dataStr = JSON.stringify(data, null, 2);\n    const dataUri = `data:application/json;charset=utf-8,${encodeURIComponent(dataStr)}`;\n    const exportFileDefaultName = `plannr-backup-${new Date().toISOString().split('T')[0]}.json`;\n    const linkElement = document.createElement('a');\n    linkElement.setAttribute('href', dataUri);\n    linkElement.setAttribute('download', exportFileDefaultName);\n    linkElement.click();\n  } catch (error) {\n    console.error('Error exporting data:', error);\n    alert('Failed to export data. Please try again.');\n  }\n};\n\n/**\r\n * Imports user data from a JSON file\r\n * @param jsonString The JSON string to import\r\n * @returns A result object indicating success or failure\r\n */\nexport const importData = jsonString => {\n  try {\n    const data = JSON.parse(jsonString);\n\n    // Validate the data structure\n    if (!data.version || !data.exportDate) {\n      return {\n        success: false,\n        message: 'Invalid backup file format. Missing version or export date.'\n      };\n    }\n\n    // Import tasks\n    if (Array.isArray(data.tasks)) {\n      saveTasks(data.tasks);\n    } else {\n      return {\n        success: false,\n        message: 'Invalid tasks data in backup file.'\n      };\n    }\n\n    // Import user data\n    if (data.user) {\n      saveUser(data.user);\n\n      // Set last streak date to today to prevent streak reset\n      const today = new Date().toISOString().split('T')[0];\n      saveLastStreakDate(today);\n    }\n    return {\n      success: true,\n      message: 'Data imported successfully! Refreshing page...'\n    };\n  } catch (error) {\n    console.error('Error importing data:', error);\n    return {\n      success: false,\n      message: 'Failed to import data. The file may be corrupted.'\n    };\n  }\n};\n\n/**\r\n * Handles file selection for import\r\n * @param file The selected file\r\n * @returns A promise that resolves with the import result\r\n */\nexport const handleFileImport = file => {\n  return new Promise(resolve => {\n    if (file.type !== 'application/json') {\n      resolve({\n        success: false,\n        message: 'Please select a JSON file.'\n      });\n      return;\n    }\n    const reader = new FileReader();\n    reader.onload = e => {\n      var _e$target;\n      const result = (_e$target = e.target) === null || _e$target === void 0 ? void 0 : _e$target.result;\n      if (typeof result === 'string') {\n        const importResult = importData(result);\n        resolve(importResult);\n      } else {\n        resolve({\n          success: false,\n          message: 'Failed to read file. Please try again.'\n        });\n      }\n    };\n    reader.onerror = () => {\n      resolve({\n        success: false,\n        message: 'Error reading file. Please try again.'\n      });\n    };\n    reader.readAsText(file);\n  });\n};","map":{"version":3,"names":["getTasks","getUser","saveTasks","saveUser","saveLastStreakDate","exportData","data","version","exportDate","Date","toISOString","user","tasks","dataStr","JSON","stringify","dataUri","encodeURIComponent","exportFileDefaultName","split","linkElement","document","createElement","setAttribute","click","error","console","alert","importData","jsonString","parse","success","message","Array","isArray","today","handleFileImport","file","Promise","resolve","type","reader","FileReader","onload","e","_e$target","result","target","importResult","onerror","readAsText"],"sources":["C:/Users/User/Desktop/Plannr/src/utils/dataExport.ts"],"sourcesContent":["import { Task } from '../contexts/TaskContext';\r\nimport { User } from '../contexts/AuthContext';\r\nimport { getTasks, getUser, saveTasks, saveUser, saveLastStreakDate } from './storage';\r\n\r\ninterface ExportData {\r\n  version: string;\r\n  exportDate: string;\r\n  user: User | null;\r\n  tasks: Task[];\r\n}\r\n\r\n/**\r\n * Exports all user data to a JSON file\r\n */\r\nexport const exportData = (): void => {\r\n  try {\r\n    const data: ExportData = {\r\n      version: '1.0',\r\n      exportDate: new Date().toISOString(),\r\n      user: getUser(),\r\n      tasks: getTasks()\r\n    };\r\n    \r\n    const dataStr = JSON.stringify(data, null, 2);\r\n    const dataUri = `data:application/json;charset=utf-8,${encodeURIComponent(dataStr)}`;\r\n    \r\n    const exportFileDefaultName = `plannr-backup-${new Date().toISOString().split('T')[0]}.json`;\r\n    \r\n    const linkElement = document.createElement('a');\r\n    linkElement.setAttribute('href', dataUri);\r\n    linkElement.setAttribute('download', exportFileDefaultName);\r\n    linkElement.click();\r\n  } catch (error) {\r\n    console.error('Error exporting data:', error);\r\n    alert('Failed to export data. Please try again.');\r\n  }\r\n};\r\n\r\n/**\r\n * Imports user data from a JSON file\r\n * @param jsonString The JSON string to import\r\n * @returns A result object indicating success or failure\r\n */\r\nexport const importData = (jsonString: string): { success: boolean; message: string } => {\r\n  try {\r\n    const data = JSON.parse(jsonString) as ExportData;\r\n    \r\n    // Validate the data structure\r\n    if (!data.version || !data.exportDate) {\r\n      return { \r\n        success: false, \r\n        message: 'Invalid backup file format. Missing version or export date.' \r\n      };\r\n    }\r\n    \r\n    // Import tasks\r\n    if (Array.isArray(data.tasks)) {\r\n      saveTasks(data.tasks);\r\n    } else {\r\n      return { \r\n        success: false, \r\n        message: 'Invalid tasks data in backup file.' \r\n      };\r\n    }\r\n    \r\n    // Import user data\r\n    if (data.user) {\r\n      saveUser(data.user);\r\n      \r\n      // Set last streak date to today to prevent streak reset\r\n      const today = new Date().toISOString().split('T')[0];\r\n      saveLastStreakDate(today);\r\n    }\r\n    \r\n    return { \r\n      success: true, \r\n      message: 'Data imported successfully! Refreshing page...' \r\n    };\r\n  } catch (error) {\r\n    console.error('Error importing data:', error);\r\n    return { \r\n      success: false, \r\n      message: 'Failed to import data. The file may be corrupted.' \r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Handles file selection for import\r\n * @param file The selected file\r\n * @returns A promise that resolves with the import result\r\n */\r\nexport const handleFileImport = (file: File): Promise<{ success: boolean; message: string }> => {\r\n  return new Promise((resolve) => {\r\n    if (file.type !== 'application/json') {\r\n      resolve({ \r\n        success: false, \r\n        message: 'Please select a JSON file.' \r\n      });\r\n      return;\r\n    }\r\n    \r\n    const reader = new FileReader();\r\n    \r\n    reader.onload = (e) => {\r\n      const result = e.target?.result;\r\n      if (typeof result === 'string') {\r\n        const importResult = importData(result);\r\n        resolve(importResult);\r\n      } else {\r\n        resolve({ \r\n          success: false, \r\n          message: 'Failed to read file. Please try again.' \r\n        });\r\n      }\r\n    };\r\n    \r\n    reader.onerror = () => {\r\n      resolve({ \r\n        success: false, \r\n        message: 'Error reading file. Please try again.' \r\n      });\r\n    };\r\n    \r\n    reader.readAsText(file);\r\n  });\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}