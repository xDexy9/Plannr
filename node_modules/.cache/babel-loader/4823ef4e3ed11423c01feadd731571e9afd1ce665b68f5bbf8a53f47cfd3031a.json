{"ast":null,"code":"// Storage keys\nconst KEYS = {\n  TASKS: 'plannr_tasks',\n  USER: 'user',\n  LAST_STREAK_DATE: 'plannr_last_streak_date',\n  STORAGE_VERSION: 'plannr_storage_version'\n};\n\n// Current storage version - increment when making breaking changes to storage structure\nconst CURRENT_VERSION = '1.0';\n\n// Initialize storage version if not set\nconst initializeStorage = () => {\n  try {\n    const version = localStorage.getItem(KEYS.STORAGE_VERSION);\n    if (!version) {\n      localStorage.setItem(KEYS.STORAGE_VERSION, CURRENT_VERSION);\n    } else if (version !== CURRENT_VERSION) {\n      // Handle migration if needed in the future\n      console.log(`Storage version updated from ${version} to ${CURRENT_VERSION}`);\n      localStorage.setItem(KEYS.STORAGE_VERSION, CURRENT_VERSION);\n    }\n  } catch (error) {\n    console.error('Failed to initialize storage:', error);\n  }\n};\n\n// Initialize on module load\ninitializeStorage();\n\n// Generic get function with error handling\nexport const getItem = (key, defaultValue) => {\n  try {\n    const item = localStorage.getItem(key);\n    return item ? JSON.parse(item) : defaultValue;\n  } catch (error) {\n    console.error(`Error retrieving ${key} from storage:`, error);\n    return defaultValue;\n  }\n};\n\n// Generic set function with error handling\nexport const setItem = (key, value) => {\n  try {\n    localStorage.setItem(key, JSON.stringify(value));\n    return true;\n  } catch (error) {\n    console.error(`Error saving ${key} to storage:`, error);\n\n    // Handle quota exceeded error\n    if (error instanceof DOMException && error.name === 'QuotaExceededError') {\n      alert('Storage limit reached. Please clear some data or try a different browser.');\n    }\n    return false;\n  }\n};\n\n// Remove item with error handling\nexport const removeItem = key => {\n  try {\n    localStorage.setItem(key, '');\n    localStorage.removeItem(key);\n    return true;\n  } catch (error) {\n    console.error(`Error removing ${key} from storage:`, error);\n    return false;\n  }\n};\n\n// Task-specific functions\nexport const getTasks = () => {\n  return getItem(KEYS.TASKS, []);\n};\nexport const saveTasks = tasks => {\n  return setItem(KEYS.TASKS, tasks);\n};\n\n// User-specific functions\nexport const getUser = () => {\n  return getItem(KEYS.USER, null);\n};\nexport const saveUser = user => {\n  return setItem(KEYS.USER, user);\n};\nexport const removeUser = () => {\n  return removeItem(KEYS.USER);\n};\n\n// Streak-specific functions\nexport const getLastStreakDate = () => {\n  return getItem(KEYS.LAST_STREAK_DATE, '');\n};\nexport const saveLastStreakDate = date => {\n  return setItem(KEYS.LAST_STREAK_DATE, date);\n};\n\n// Storage status check\nexport const isStorageAvailable = () => {\n  try {\n    const test = '__storage_test__';\n    localStorage.setItem(test, test);\n    localStorage.removeItem(test);\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n\n// Get storage usage information\nexport const getStorageInfo = () => {\n  let used = 0;\n  try {\n    for (let i = 0; i < localStorage.length; i++) {\n      const key = localStorage.key(i);\n      if (key) {\n        const value = localStorage.getItem(key) || '';\n        used += key.length + value.length;\n      }\n    }\n  } catch (e) {\n    console.error('Error calculating storage usage:', e);\n  }\n\n  // Convert to KB (approximate)\n  const usedKB = Math.round(used / 1024);\n\n  // Most browsers have a limit of 5-10MB\n  const totalKB = 5 * 1024; // 5MB in KB\n\n  return {\n    used: usedKB,\n    total: totalKB,\n    percentage: Math.min(100, Math.round(usedKB / totalKB * 100))\n  };\n};","map":{"version":3,"names":["KEYS","TASKS","USER","LAST_STREAK_DATE","STORAGE_VERSION","CURRENT_VERSION","initializeStorage","version","localStorage","getItem","setItem","console","log","error","key","defaultValue","item","JSON","parse","value","stringify","DOMException","name","alert","removeItem","getTasks","saveTasks","tasks","getUser","saveUser","user","removeUser","getLastStreakDate","saveLastStreakDate","date","isStorageAvailable","test","e","getStorageInfo","used","i","length","usedKB","Math","round","totalKB","total","percentage","min"],"sources":["C:/Users/User/Desktop/Plannr/src/utils/storage.ts"],"sourcesContent":["import { Task } from '../contexts/TaskContext';\r\nimport { User } from '../contexts/AuthContext';\r\n\r\n// Storage keys\r\nconst KEYS = {\r\n  TASKS: 'plannr_tasks',\r\n  USER: 'user',\r\n  LAST_STREAK_DATE: 'plannr_last_streak_date',\r\n  STORAGE_VERSION: 'plannr_storage_version'\r\n};\r\n\r\n// Current storage version - increment when making breaking changes to storage structure\r\nconst CURRENT_VERSION = '1.0';\r\n\r\n// Initialize storage version if not set\r\nconst initializeStorage = (): void => {\r\n  try {\r\n    const version = localStorage.getItem(KEYS.STORAGE_VERSION);\r\n    if (!version) {\r\n      localStorage.setItem(KEYS.STORAGE_VERSION, CURRENT_VERSION);\r\n    } else if (version !== CURRENT_VERSION) {\r\n      // Handle migration if needed in the future\r\n      console.log(`Storage version updated from ${version} to ${CURRENT_VERSION}`);\r\n      localStorage.setItem(KEYS.STORAGE_VERSION, CURRENT_VERSION);\r\n    }\r\n  } catch (error) {\r\n    console.error('Failed to initialize storage:', error);\r\n  }\r\n};\r\n\r\n// Initialize on module load\r\ninitializeStorage();\r\n\r\n// Generic get function with error handling\r\nexport const getItem = <T>(key: string, defaultValue: T): T => {\r\n  try {\r\n    const item = localStorage.getItem(key);\r\n    return item ? JSON.parse(item) : defaultValue;\r\n  } catch (error) {\r\n    console.error(`Error retrieving ${key} from storage:`, error);\r\n    return defaultValue;\r\n  }\r\n};\r\n\r\n// Generic set function with error handling\r\nexport const setItem = <T>(key: string, value: T): boolean => {\r\n  try {\r\n    localStorage.setItem(key, JSON.stringify(value));\r\n    return true;\r\n  } catch (error) {\r\n    console.error(`Error saving ${key} to storage:`, error);\r\n    \r\n    // Handle quota exceeded error\r\n    if (error instanceof DOMException && error.name === 'QuotaExceededError') {\r\n      alert('Storage limit reached. Please clear some data or try a different browser.');\r\n    }\r\n    \r\n    return false;\r\n  }\r\n};\r\n\r\n// Remove item with error handling\r\nexport const removeItem = (key: string): boolean => {\r\n  try {\r\n    localStorage.setItem(key, '');\r\n    localStorage.removeItem(key);\r\n    return true;\r\n  } catch (error) {\r\n    console.error(`Error removing ${key} from storage:`, error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Task-specific functions\r\nexport const getTasks = (): Task[] => {\r\n  return getItem<Task[]>(KEYS.TASKS, []);\r\n};\r\n\r\nexport const saveTasks = (tasks: Task[]): boolean => {\r\n  return setItem(KEYS.TASKS, tasks);\r\n};\r\n\r\n// User-specific functions\r\nexport const getUser = (): User | null => {\r\n  return getItem<User | null>(KEYS.USER, null);\r\n};\r\n\r\nexport const saveUser = (user: User): boolean => {\r\n  return setItem(KEYS.USER, user);\r\n};\r\n\r\nexport const removeUser = (): boolean => {\r\n  return removeItem(KEYS.USER);\r\n};\r\n\r\n// Streak-specific functions\r\nexport const getLastStreakDate = (): string => {\r\n  return getItem<string>(KEYS.LAST_STREAK_DATE, '');\r\n};\r\n\r\nexport const saveLastStreakDate = (date: string): boolean => {\r\n  return setItem(KEYS.LAST_STREAK_DATE, date);\r\n};\r\n\r\n// Storage status check\r\nexport const isStorageAvailable = (): boolean => {\r\n  try {\r\n    const test = '__storage_test__';\r\n    localStorage.setItem(test, test);\r\n    localStorage.removeItem(test);\r\n    return true;\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n};\r\n\r\n// Get storage usage information\r\nexport const getStorageInfo = (): { used: number, total: number, percentage: number } => {\r\n  let used = 0;\r\n  \r\n  try {\r\n    for (let i = 0; i < localStorage.length; i++) {\r\n      const key = localStorage.key(i);\r\n      if (key) {\r\n        const value = localStorage.getItem(key) || '';\r\n        used += key.length + value.length;\r\n      }\r\n    }\r\n  } catch (e) {\r\n    console.error('Error calculating storage usage:', e);\r\n  }\r\n  \r\n  // Convert to KB (approximate)\r\n  const usedKB = Math.round(used / 1024);\r\n  \r\n  // Most browsers have a limit of 5-10MB\r\n  const totalKB = 5 * 1024; // 5MB in KB\r\n  \r\n  return {\r\n    used: usedKB,\r\n    total: totalKB,\r\n    percentage: Math.min(100, Math.round((usedKB / totalKB) * 100))\r\n  };\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}