{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\Plannr\\\\src\\\\contexts\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const checkAuth = () => {\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      setUser(JSON.parse(storedUser));\n      setIsAuthenticated(true);\n    }\n  };\n  useEffect(() => {\n    checkAuth();\n  }, []);\n  const login = async (username, password) => {\n    // In a real app, this would be an API call\n    // For demo purposes, we'll just simulate a successful login\n\n    // Special case for demo user\n    if (username === 'demo_user') {\n      const demoUser = {\n        id: 'demo123',\n        username: 'demo_user',\n        fullName: 'Demo User',\n        location: {\n          city: 'San Francisco',\n          country: 'USA'\n        },\n        dob: '1990-01-01',\n        joinDate: new Date().toISOString(),\n        streak: 5,\n        achievements: 3,\n        tasksCompleted: 18,\n        workweekDays: [1, 2, 3, 4, 5] // Monday to Friday\n      };\n      localStorage.setItem('user', JSON.stringify(demoUser));\n      setUser(demoUser);\n      setIsAuthenticated(true);\n      return;\n    }\n\n    // Regular user login\n    const mockUser = {\n      id: '1',\n      username,\n      joinDate: new Date().toISOString(),\n      streak: 0,\n      achievements: 0,\n      tasksCompleted: 0,\n      workweekDays: [1, 2, 3, 4, 5] // Monday to Friday\n    };\n    localStorage.setItem('user', JSON.stringify(mockUser));\n    setUser(mockUser);\n    setIsAuthenticated(true);\n  };\n  const register = async (username, password, dob) => {\n    // In a real app, this would be an API call\n    // For demo purposes, we'll just simulate a successful registration\n    const mockUser = {\n      id: '1',\n      username,\n      dob,\n      joinDate: new Date().toISOString(),\n      streak: 0,\n      achievements: 0,\n      tasksCompleted: 0,\n      workweekDays: [1, 2, 3, 4, 5] // Monday to Friday\n    };\n    localStorage.setItem('user', JSON.stringify(mockUser));\n    setUser(mockUser);\n    setIsAuthenticated(true);\n  };\n  const logout = () => {\n    localStorage.removeItem('user');\n    setUser(null);\n    setIsAuthenticated(false);\n  };\n  const updateProfile = data => {\n    if (user) {\n      const updatedUser = {\n        ...user,\n        ...data\n      };\n      localStorage.setItem('user', JSON.stringify(updatedUser));\n      setUser(updatedUser);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      isAuthenticated,\n      login,\n      register,\n      logout,\n      updateProfile,\n      checkAuth\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"Uq7KcTiOseX3k63CKoUNgtSkdNA=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","undefined","AuthProvider","children","_s","user","setUser","isAuthenticated","setIsAuthenticated","checkAuth","storedUser","localStorage","getItem","JSON","parse","login","username","password","demoUser","id","fullName","location","city","country","dob","joinDate","Date","toISOString","streak","achievements","tasksCompleted","workweekDays","setItem","stringify","mockUser","register","logout","removeItem","updateProfile","data","updatedUser","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/User/Desktop/Plannr/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\n\r\nexport interface User {\r\n  id: string;\r\n  username: string;\r\n  fullName?: string;\r\n  location?: {\r\n    city: string;\r\n    country: string;\r\n  };\r\n  dob?: string;\r\n  joinDate: string;\r\n  streak: number;\r\n  achievements: number;\r\n  tasksCompleted: number;\r\n  workweekDays: number[];\r\n}\r\n\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  isAuthenticated: boolean;\r\n  login: (username: string, password: string) => Promise<void>;\r\n  register: (username: string, password: string, dob: string) => Promise<void>;\r\n  logout: () => void;\r\n  updateProfile: (data: Partial<User>) => void;\r\n  checkAuth: () => void;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);\r\n\r\n  const checkAuth = () => {\r\n    const storedUser = localStorage.getItem('user');\r\n    if (storedUser) {\r\n      setUser(JSON.parse(storedUser));\r\n      setIsAuthenticated(true);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    checkAuth();\r\n  }, []);\r\n\r\n  const login = async (username: string, password: string) => {\r\n    // In a real app, this would be an API call\r\n    // For demo purposes, we'll just simulate a successful login\r\n    \r\n    // Special case for demo user\r\n    if (username === 'demo_user') {\r\n      const demoUser: User = {\r\n        id: 'demo123',\r\n        username: 'demo_user',\r\n        fullName: 'Demo User',\r\n        location: {\r\n          city: 'San Francisco',\r\n          country: 'USA'\r\n        },\r\n        dob: '1990-01-01',\r\n        joinDate: new Date().toISOString(),\r\n        streak: 5,\r\n        achievements: 3,\r\n        tasksCompleted: 18,\r\n        workweekDays: [1, 2, 3, 4, 5], // Monday to Friday\r\n      };\r\n      \r\n      localStorage.setItem('user', JSON.stringify(demoUser));\r\n      setUser(demoUser);\r\n      setIsAuthenticated(true);\r\n      return;\r\n    }\r\n    \r\n    // Regular user login\r\n    const mockUser: User = {\r\n      id: '1',\r\n      username,\r\n      joinDate: new Date().toISOString(),\r\n      streak: 0,\r\n      achievements: 0,\r\n      tasksCompleted: 0,\r\n      workweekDays: [1, 2, 3, 4, 5], // Monday to Friday\r\n    };\r\n    \r\n    localStorage.setItem('user', JSON.stringify(mockUser));\r\n    setUser(mockUser);\r\n    setIsAuthenticated(true);\r\n  };\r\n\r\n  const register = async (username: string, password: string, dob: string) => {\r\n    // In a real app, this would be an API call\r\n    // For demo purposes, we'll just simulate a successful registration\r\n    const mockUser: User = {\r\n      id: '1',\r\n      username,\r\n      dob,\r\n      joinDate: new Date().toISOString(),\r\n      streak: 0,\r\n      achievements: 0,\r\n      tasksCompleted: 0,\r\n      workweekDays: [1, 2, 3, 4, 5], // Monday to Friday\r\n    };\r\n    \r\n    localStorage.setItem('user', JSON.stringify(mockUser));\r\n    setUser(mockUser);\r\n    setIsAuthenticated(true);\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('user');\r\n    setUser(null);\r\n    setIsAuthenticated(false);\r\n  };\r\n\r\n  const updateProfile = (data: Partial<User>) => {\r\n    if (user) {\r\n      const updatedUser = { ...user, ...data };\r\n      localStorage.setItem('user', JSON.stringify(updatedUser));\r\n      setUser(updatedUser);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ \r\n      user, \r\n      isAuthenticated, \r\n      login, \r\n      register, \r\n      logout, \r\n      updateProfile,\r\n      checkAuth\r\n    }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = (): AuthContextType => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}