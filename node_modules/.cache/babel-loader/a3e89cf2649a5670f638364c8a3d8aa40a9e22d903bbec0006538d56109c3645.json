{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\Plannr\\\\src\\\\contexts\\\\TaskContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useAuth } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskContext = /*#__PURE__*/createContext(undefined);\nexport const TaskProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    user,\n    updateProfile\n  } = useAuth();\n  const [tasks, setTasks] = useState(() => {\n    const savedTasks = localStorage.getItem('plannr_tasks');\n    if (savedTasks) {\n      return JSON.parse(savedTasks);\n    }\n\n    // Sample tasks\n    const sampleTasks = [\n    // Personal tasks\n    {\n      id: '1',\n      title: 'Morning workout routine',\n      description: '30 minutes of cardio and strength training',\n      dueDate: new Date().toISOString().split('T')[0],\n      category: 'Personal',\n      completed: false,\n      createdAt: new Date().toISOString(),\n      importance: 'high',\n      days: [1, 3, 5]\n    }, {\n      id: '2',\n      title: 'Grocery shopping',\n      description: 'Buy fruits, vegetables, and other essentials',\n      dueDate: new Date(Date.now() + 86400000).toISOString().split('T')[0],\n      category: 'Personal',\n      completed: false,\n      createdAt: new Date().toISOString(),\n      importance: 'medium',\n      days: [2, 5]\n    }, {\n      id: '3',\n      title: 'Read a book',\n      description: 'Continue reading \"Atomic Habits\"',\n      dueDate: new Date(Date.now() + 172800000).toISOString().split('T')[0],\n      category: 'Personal',\n      completed: false,\n      createdAt: new Date().toISOString(),\n      importance: 'low',\n      days: [1, 2, 3, 4, 5, 6, 7]\n    }, {\n      id: '4',\n      title: 'Meditation session',\n      description: '15 minutes of mindfulness meditation',\n      dueDate: new Date().toISOString().split('T')[0],\n      category: 'Personal',\n      completed: false,\n      createdAt: new Date().toISOString(),\n      importance: 'medium',\n      days: [1, 2, 3, 4, 5, 6, 7]\n    },\n    // Work tasks\n    {\n      id: '5',\n      title: 'Weekly team meeting',\n      description: 'Discuss project progress and roadblocks',\n      dueDate: new Date(Date.now() + 86400000).toISOString().split('T')[0],\n      category: 'Work',\n      completed: false,\n      createdAt: new Date().toISOString(),\n      importance: 'high',\n      days: [2]\n    }, {\n      id: '6',\n      title: 'Complete project proposal',\n      description: 'Finalize the budget and timeline',\n      dueDate: new Date(Date.now() + 259200000).toISOString().split('T')[0],\n      category: 'Work',\n      completed: false,\n      createdAt: new Date().toISOString(),\n      importance: 'high',\n      days: [1, 2, 3, 4, 5]\n    }, {\n      id: '7',\n      title: 'Review code changes',\n      description: 'Check pull requests from the development team',\n      dueDate: new Date().toISOString().split('T')[0],\n      category: 'Work',\n      completed: false,\n      createdAt: new Date().toISOString(),\n      importance: 'medium',\n      days: [1, 3, 5]\n    }, {\n      id: '8',\n      title: 'Update documentation',\n      description: 'Add new features to the user guide',\n      dueDate: new Date(Date.now() + 172800000).toISOString().split('T')[0],\n      category: 'Work',\n      completed: false,\n      createdAt: new Date().toISOString(),\n      importance: 'low',\n      days: [4]\n    },\n    // Home tasks\n    {\n      id: '9',\n      title: 'Clean the kitchen',\n      description: 'Wash dishes and wipe counters',\n      dueDate: new Date().toISOString().split('T')[0],\n      category: 'Home',\n      completed: false,\n      createdAt: new Date().toISOString(),\n      importance: 'medium',\n      days: [1, 4, 7]\n    }, {\n      id: '10',\n      title: 'Do laundry',\n      description: 'Wash, dry, and fold clothes',\n      dueDate: new Date(Date.now() + 86400000).toISOString().split('T')[0],\n      category: 'Home',\n      completed: false,\n      createdAt: new Date().toISOString(),\n      importance: 'medium',\n      days: [6]\n    }, {\n      id: '11',\n      title: 'Pay utility bills',\n      description: 'Electricity, water, and internet',\n      dueDate: new Date(Date.now() + 345600000).toISOString().split('T')[0],\n      category: 'Home',\n      completed: false,\n      createdAt: new Date().toISOString(),\n      importance: 'high',\n      days: [5]\n    }, {\n      id: '12',\n      title: 'Organize closet',\n      description: 'Sort clothes and donate unused items',\n      dueDate: new Date(Date.now() + 259200000).toISOString().split('T')[0],\n      category: 'Home',\n      completed: false,\n      createdAt: new Date().toISOString(),\n      importance: 'low',\n      days: [7]\n    },\n    // Friends tasks\n    {\n      id: '13',\n      title: 'Call Sarah',\n      description: 'Catch up and plan weekend meetup',\n      dueDate: new Date().toISOString().split('T')[0],\n      category: 'Friends',\n      completed: false,\n      createdAt: new Date().toISOString(),\n      importance: 'medium',\n      days: [3]\n    }, {\n      id: '14',\n      title: 'Plan birthday party',\n      description: 'Organize surprise party for Alex',\n      dueDate: new Date(Date.now() + 604800000).toISOString().split('T')[0],\n      category: 'Friends',\n      completed: false,\n      createdAt: new Date().toISOString(),\n      importance: 'high',\n      days: [2, 4]\n    }, {\n      id: '15',\n      title: 'Movie night',\n      description: 'Watch new Marvel movie with friends',\n      dueDate: new Date(Date.now() + 432000000).toISOString().split('T')[0],\n      category: 'Friends',\n      completed: false,\n      createdAt: new Date().toISOString(),\n      importance: 'low',\n      days: [5]\n    }, {\n      id: '16',\n      title: 'Coffee meetup',\n      description: 'Meet with college friends at Starbucks',\n      dueDate: new Date(Date.now() + 172800000).toISOString().split('T')[0],\n      category: 'Friends',\n      completed: false,\n      createdAt: new Date().toISOString(),\n      importance: 'medium',\n      days: [6]\n    },\n    // Family tasks\n    {\n      id: '17',\n      title: 'Family dinner',\n      description: 'Cook special meal for everyone',\n      dueDate: new Date(Date.now() + 86400000).toISOString().split('T')[0],\n      category: 'Family',\n      completed: false,\n      createdAt: new Date().toISOString(),\n      importance: 'high',\n      days: [7]\n    }, {\n      id: '18',\n      title: 'Help mom with shopping',\n      description: 'Drive mom to the mall',\n      dueDate: new Date(Date.now() + 259200000).toISOString().split('T')[0],\n      category: 'Family',\n      completed: false,\n      createdAt: new Date().toISOString(),\n      importance: 'medium',\n      days: [6]\n    }, {\n      id: '19',\n      title: 'Call grandparents',\n      description: 'Weekly check-in call',\n      dueDate: new Date().toISOString().split('T')[0],\n      category: 'Family',\n      completed: false,\n      createdAt: new Date().toISOString(),\n      importance: 'high',\n      days: [7]\n    }, {\n      id: '20',\n      title: 'Plan family vacation',\n      description: 'Research destinations and accommodations',\n      dueDate: new Date(Date.now() + 1209600000).toISOString().split('T')[0],\n      category: 'Family',\n      completed: false,\n      createdAt: new Date().toISOString(),\n      importance: 'low',\n      days: [1, 3]\n    }];\n    return sampleTasks;\n  });\n\n  // Add state to track the last date the streak was updated\n  const [lastStreakDate, setLastStreakDate] = useState(() => {\n    const saved = localStorage.getItem('plannr_last_streak_date');\n    return saved || '';\n  });\n\n  // Save lastStreakDate to localStorage whenever it changes\n  useEffect(() => {\n    if (lastStreakDate) {\n      localStorage.setItem('plannr_last_streak_date', lastStreakDate);\n    }\n  }, [lastStreakDate]);\n  useEffect(() => {\n    localStorage.setItem('plannr_tasks', JSON.stringify(tasks));\n  }, [tasks]);\n  const addTask = task => {\n    // Check if a task with the same title already exists\n    const existingTaskIndex = tasks.findIndex(t => t.title === task.title);\n    if (existingTaskIndex !== -1) {\n      // Update the existing task\n      const updatedTasks = [...tasks];\n      updatedTasks[existingTaskIndex] = {\n        ...updatedTasks[existingTaskIndex],\n        ...task,\n        // Preserve the original id and createdAt\n        id: updatedTasks[existingTaskIndex].id,\n        createdAt: updatedTasks[existingTaskIndex].createdAt\n      };\n      setTasks(updatedTasks);\n    } else {\n      // Create a new task\n      const newTask = {\n        ...task,\n        id: Date.now().toString(),\n        createdAt: new Date().toISOString()\n      };\n      setTasks(prevTasks => [...prevTasks, newTask]);\n    }\n  };\n  const updateTask = (id, updatedTask) => {\n    setTasks(prevTasks => {\n      const newTasks = prevTasks.map(task => task.id === id ? {\n        ...task,\n        ...updatedTask\n      } : task);\n      localStorage.setItem('plannr_tasks', JSON.stringify(newTasks));\n      return newTasks;\n    });\n  };\n  const deleteTask = id => {\n    setTasks(prevTasks => prevTasks.filter(task => task.id !== id));\n  };\n  const completeTask = id => {\n    setTasks(prevTasks => {\n      const newTasks = prevTasks.map(task => task.id === id ? {\n        ...task,\n        completed: true\n      } : task);\n      localStorage.setItem('plannr_tasks', JSON.stringify(newTasks));\n      return newTasks;\n    });\n\n    // Update user stats\n    if (user) {\n      const completedTasks = user.tasksCompleted + 1;\n\n      // Calculate achievements using exponential formula\n      // Level 1: 5 tasks, Level 2: 10 tasks, Level 3: 20 tasks, Level 4: 40 tasks, etc.\n      let achievementLevel = 0;\n      let threshold = 5;\n      while (completedTasks >= threshold) {\n        achievementLevel++;\n        threshold = 5 * Math.pow(2, achievementLevel);\n      }\n\n      // Update task completion stats (streak will be updated by the checkAllTasksCompleted effect)\n      updateProfile({\n        tasksCompleted: completedTasks,\n        achievements: achievementLevel\n      });\n\n      // The streak will be updated by the checkAllTasksCompleted effect\n      // which runs whenever tasks change\n    }\n  };\n  const getTodayTasks = () => {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    return tasks.filter(task => {\n      const taskDate = new Date(task.dueDate);\n      taskDate.setHours(0, 0, 0, 0);\n      return taskDate.getTime() === today.getTime() && !task.completed;\n    });\n  };\n  const getUpcomingTasks = () => {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    return tasks.filter(task => {\n      const taskDate = new Date(task.dueDate);\n      taskDate.setHours(0, 0, 0, 0);\n      return taskDate.getTime() > today.getTime() && !task.completed;\n    }).sort((a, b) => new Date(a.dueDate).getTime() - new Date(b.dueDate).getTime());\n  };\n  const getTasksByCategory = category => {\n    return tasks.filter(task => task.category === category && !task.completed);\n  };\n  const getTasksForNextDays = days => {\n    const result = {};\n    const today = new Date();\n    for (let i = 0; i < days; i++) {\n      const date = new Date(today);\n      date.setDate(today.getDate() + i);\n      date.setHours(0, 0, 0, 0);\n      const dateStr = date.toISOString().split('T')[0];\n      result[dateStr] = tasks.filter(task => {\n        const taskDate = new Date(task.dueDate);\n        taskDate.setHours(0, 0, 0, 0);\n        return taskDate.getTime() === date.getTime() && !task.completed;\n      });\n    }\n    return result;\n  };\n  const addTaskToToday = task => {\n    // Create a new task based on the template but for today\n    const today = new Date().toISOString().split('T')[0];\n    const newTask = {\n      title: task.title,\n      description: task.description,\n      dueDate: today,\n      category: task.category,\n      completed: false,\n      importance: task.importance,\n      days: task.days\n    };\n    addTask(newTask);\n  };\n\n  // Add a function to check if the streak should be reset\n  const checkAndResetStreak = () => {\n    if (!user) return;\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const todayStr = today.toISOString().split('T')[0];\n\n    // If lastStreakDate is empty, initialize it to today\n    if (!lastStreakDate) {\n      setLastStreakDate(todayStr);\n      return;\n    }\n\n    // Check if a day was missed\n    const lastDate = new Date(lastStreakDate);\n    lastDate.setHours(0, 0, 0, 0);\n    const yesterday = new Date(today);\n    yesterday.setDate(yesterday.getDate() - 1);\n    yesterday.setHours(0, 0, 0, 0);\n\n    // If the last streak date is before yesterday, reset the streak\n    if (lastDate.getTime() < yesterday.getTime()) {\n      console.log('Streak reset due to missed day', {\n        lastStreakDate,\n        yesterday: yesterday.toISOString().split('T')[0],\n        today: todayStr\n      });\n      updateProfile({\n        streak: 0\n      });\n\n      // Update lastStreakDate to today to prevent multiple resets\n      setLastStreakDate(todayStr);\n    }\n  };\n\n  // Check streak on component mount and when user changes\n  useEffect(() => {\n    if (user) {\n      checkAndResetStreak();\n    }\n  }, [user]);\n\n  // Add a function to check if all tasks for today are completed\n  const checkAllTasksCompleted = () => {\n    if (!user) return;\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const todayStr = today.toISOString().split('T')[0];\n    const todaysTasks = tasks.filter(task => {\n      const taskDate = new Date(task.dueDate);\n      taskDate.setHours(0, 0, 0, 0);\n      return taskDate.getTime() === today.getTime();\n    });\n\n    // If there are no tasks for today, don't update the streak\n    if (todaysTasks.length === 0) return;\n    const allCompleted = todaysTasks.every(task => task.completed);\n\n    // If all tasks are completed and we haven't updated the streak today\n    if (allCompleted && lastStreakDate !== todayStr) {\n      const newStreak = user.streak + 1;\n      console.log('All tasks completed! Updating streak', {\n        previousStreak: user.streak,\n        newStreak,\n        tasksCount: todaysTasks.length\n      });\n      updateProfile({\n        streak: newStreak\n      });\n      setLastStreakDate(todayStr);\n    }\n  };\n\n  // Check if all tasks are completed whenever tasks change\n  useEffect(() => {\n    checkAllTasksCompleted();\n  }, [tasks]);\n  const contextValue = {\n    tasks,\n    addTask,\n    updateTask,\n    deleteTask,\n    completeTask,\n    getTodayTasks,\n    getUpcomingTasks,\n    getTasksByCategory,\n    getTasksForNextDays,\n    addTaskToToday\n  };\n  return /*#__PURE__*/_jsxDEV(TaskContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 538,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskProvider, \"9rBD2/gh9+eqWn95VDZWFUDdSt0=\", false, function () {\n  return [useAuth];\n});\n_c = TaskProvider;\nexport const useTask = () => {\n  _s2();\n  const context = useContext(TaskContext);\n  if (context === undefined) {\n    throw new Error('useTask must be used within a TaskProvider');\n  }\n  return context;\n};\n_s2(useTask, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"TaskProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useAuth","jsxDEV","_jsxDEV","TaskContext","undefined","TaskProvider","children","_s","user","updateProfile","tasks","setTasks","savedTasks","localStorage","getItem","JSON","parse","sampleTasks","id","title","description","dueDate","Date","toISOString","split","category","completed","createdAt","importance","days","now","lastStreakDate","setLastStreakDate","saved","setItem","stringify","addTask","task","existingTaskIndex","findIndex","t","updatedTasks","newTask","toString","prevTasks","updateTask","updatedTask","newTasks","map","deleteTask","filter","completeTask","completedTasks","tasksCompleted","achievementLevel","threshold","Math","pow","achievements","getTodayTasks","today","setHours","taskDate","getTime","getUpcomingTasks","sort","a","b","getTasksByCategory","getTasksForNextDays","result","i","date","setDate","getDate","dateStr","addTaskToToday","checkAndResetStreak","todayStr","lastDate","yesterday","console","log","streak","checkAllTasksCompleted","todaysTasks","length","allCompleted","every","newStreak","previousStreak","tasksCount","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTask","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/User/Desktop/Plannr/src/contexts/TaskContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\nimport { useAuth } from './AuthContext';\r\n\r\nexport type TaskCategory = 'Personal' | 'Work' | 'Home' | 'Friends' | 'Family';\r\n\r\nexport interface Task {\r\n  id: string;\r\n  title: string;\r\n  description?: string;\r\n  dueDate: string;\r\n  category: TaskCategory;\r\n  completed: boolean;\r\n  createdAt: string;\r\n  importance?: 'low' | 'medium' | 'high';\r\n  days?: number[];\r\n}\r\n\r\ninterface TaskContextType {\r\n  tasks: Task[];\r\n  addTask: (task: Omit<Task, 'id' | 'createdAt'>) => void;\r\n  updateTask: (id: string, task: Partial<Task>) => void;\r\n  deleteTask: (id: string) => void;\r\n  completeTask: (id: string) => void;\r\n  getTodayTasks: () => Task[];\r\n  getUpcomingTasks: () => Task[];\r\n  getTasksByCategory: (category: TaskCategory) => Task[];\r\n  getTasksForNextDays: (days: number) => Record<string, Task[]>;\r\n  addTaskToToday: (task: Task) => void;\r\n}\r\n\r\nconst TaskContext = createContext<TaskContextType | undefined>(undefined);\r\n\r\ninterface TaskProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const TaskProvider: React.FC<TaskProviderProps> = ({ children }) => {\r\n  const { user, updateProfile } = useAuth();\r\n  const [tasks, setTasks] = useState<Task[]>(() => {\r\n    const savedTasks = localStorage.getItem('plannr_tasks');\r\n    if (savedTasks) {\r\n      return JSON.parse(savedTasks);\r\n    }\r\n    \r\n    // Sample tasks\r\n    const sampleTasks: Task[] = [\r\n      // Personal tasks\r\n      {\r\n        id: '1',\r\n        title: 'Morning workout routine',\r\n        description: '30 minutes of cardio and strength training',\r\n        dueDate: new Date().toISOString().split('T')[0],\r\n        category: 'Personal',\r\n        completed: false,\r\n        createdAt: new Date().toISOString(),\r\n        importance: 'high',\r\n        days: [1, 3, 5]\r\n      },\r\n      {\r\n        id: '2',\r\n        title: 'Grocery shopping',\r\n        description: 'Buy fruits, vegetables, and other essentials',\r\n        dueDate: new Date(Date.now() + 86400000).toISOString().split('T')[0],\r\n        category: 'Personal',\r\n        completed: false,\r\n        createdAt: new Date().toISOString(),\r\n        importance: 'medium',\r\n        days: [2, 5]\r\n      },\r\n      {\r\n        id: '3',\r\n        title: 'Read a book',\r\n        description: 'Continue reading \"Atomic Habits\"',\r\n        dueDate: new Date(Date.now() + 172800000).toISOString().split('T')[0],\r\n        category: 'Personal',\r\n        completed: false,\r\n        createdAt: new Date().toISOString(),\r\n        importance: 'low',\r\n        days: [1, 2, 3, 4, 5, 6, 7]\r\n      },\r\n      {\r\n        id: '4',\r\n        title: 'Meditation session',\r\n        description: '15 minutes of mindfulness meditation',\r\n        dueDate: new Date().toISOString().split('T')[0],\r\n        category: 'Personal',\r\n        completed: false,\r\n        createdAt: new Date().toISOString(),\r\n        importance: 'medium',\r\n        days: [1, 2, 3, 4, 5, 6, 7]\r\n      },\r\n      \r\n      // Work tasks\r\n      {\r\n        id: '5',\r\n        title: 'Weekly team meeting',\r\n        description: 'Discuss project progress and roadblocks',\r\n        dueDate: new Date(Date.now() + 86400000).toISOString().split('T')[0],\r\n        category: 'Work',\r\n        completed: false,\r\n        createdAt: new Date().toISOString(),\r\n        importance: 'high',\r\n        days: [2]\r\n      },\r\n      {\r\n        id: '6',\r\n        title: 'Complete project proposal',\r\n        description: 'Finalize the budget and timeline',\r\n        dueDate: new Date(Date.now() + 259200000).toISOString().split('T')[0],\r\n        category: 'Work',\r\n        completed: false,\r\n        createdAt: new Date().toISOString(),\r\n        importance: 'high',\r\n        days: [1, 2, 3, 4, 5]\r\n      },\r\n      {\r\n        id: '7',\r\n        title: 'Review code changes',\r\n        description: 'Check pull requests from the development team',\r\n        dueDate: new Date().toISOString().split('T')[0],\r\n        category: 'Work',\r\n        completed: false,\r\n        createdAt: new Date().toISOString(),\r\n        importance: 'medium',\r\n        days: [1, 3, 5]\r\n      },\r\n      {\r\n        id: '8',\r\n        title: 'Update documentation',\r\n        description: 'Add new features to the user guide',\r\n        dueDate: new Date(Date.now() + 172800000).toISOString().split('T')[0],\r\n        category: 'Work',\r\n        completed: false,\r\n        createdAt: new Date().toISOString(),\r\n        importance: 'low',\r\n        days: [4]\r\n      },\r\n      \r\n      // Home tasks\r\n      {\r\n        id: '9',\r\n        title: 'Clean the kitchen',\r\n        description: 'Wash dishes and wipe counters',\r\n        dueDate: new Date().toISOString().split('T')[0],\r\n        category: 'Home',\r\n        completed: false,\r\n        createdAt: new Date().toISOString(),\r\n        importance: 'medium',\r\n        days: [1, 4, 7]\r\n      },\r\n      {\r\n        id: '10',\r\n        title: 'Do laundry',\r\n        description: 'Wash, dry, and fold clothes',\r\n        dueDate: new Date(Date.now() + 86400000).toISOString().split('T')[0],\r\n        category: 'Home',\r\n        completed: false,\r\n        createdAt: new Date().toISOString(),\r\n        importance: 'medium',\r\n        days: [6]\r\n      },\r\n      {\r\n        id: '11',\r\n        title: 'Pay utility bills',\r\n        description: 'Electricity, water, and internet',\r\n        dueDate: new Date(Date.now() + 345600000).toISOString().split('T')[0],\r\n        category: 'Home',\r\n        completed: false,\r\n        createdAt: new Date().toISOString(),\r\n        importance: 'high',\r\n        days: [5]\r\n      },\r\n      {\r\n        id: '12',\r\n        title: 'Organize closet',\r\n        description: 'Sort clothes and donate unused items',\r\n        dueDate: new Date(Date.now() + 259200000).toISOString().split('T')[0],\r\n        category: 'Home',\r\n        completed: false,\r\n        createdAt: new Date().toISOString(),\r\n        importance: 'low',\r\n        days: [7]\r\n      },\r\n      \r\n      // Friends tasks\r\n      {\r\n        id: '13',\r\n        title: 'Call Sarah',\r\n        description: 'Catch up and plan weekend meetup',\r\n        dueDate: new Date().toISOString().split('T')[0],\r\n        category: 'Friends',\r\n        completed: false,\r\n        createdAt: new Date().toISOString(),\r\n        importance: 'medium',\r\n        days: [3]\r\n      },\r\n      {\r\n        id: '14',\r\n        title: 'Plan birthday party',\r\n        description: 'Organize surprise party for Alex',\r\n        dueDate: new Date(Date.now() + 604800000).toISOString().split('T')[0],\r\n        category: 'Friends',\r\n        completed: false,\r\n        createdAt: new Date().toISOString(),\r\n        importance: 'high',\r\n        days: [2, 4]\r\n      },\r\n      {\r\n        id: '15',\r\n        title: 'Movie night',\r\n        description: 'Watch new Marvel movie with friends',\r\n        dueDate: new Date(Date.now() + 432000000).toISOString().split('T')[0],\r\n        category: 'Friends',\r\n        completed: false,\r\n        createdAt: new Date().toISOString(),\r\n        importance: 'low',\r\n        days: [5]\r\n      },\r\n      {\r\n        id: '16',\r\n        title: 'Coffee meetup',\r\n        description: 'Meet with college friends at Starbucks',\r\n        dueDate: new Date(Date.now() + 172800000).toISOString().split('T')[0],\r\n        category: 'Friends',\r\n        completed: false,\r\n        createdAt: new Date().toISOString(),\r\n        importance: 'medium',\r\n        days: [6]\r\n      },\r\n      \r\n      // Family tasks\r\n      {\r\n        id: '17',\r\n        title: 'Family dinner',\r\n        description: 'Cook special meal for everyone',\r\n        dueDate: new Date(Date.now() + 86400000).toISOString().split('T')[0],\r\n        category: 'Family',\r\n        completed: false,\r\n        createdAt: new Date().toISOString(),\r\n        importance: 'high',\r\n        days: [7]\r\n      },\r\n      {\r\n        id: '18',\r\n        title: 'Help mom with shopping',\r\n        description: 'Drive mom to the mall',\r\n        dueDate: new Date(Date.now() + 259200000).toISOString().split('T')[0],\r\n        category: 'Family',\r\n        completed: false,\r\n        createdAt: new Date().toISOString(),\r\n        importance: 'medium',\r\n        days: [6]\r\n      },\r\n      {\r\n        id: '19',\r\n        title: 'Call grandparents',\r\n        description: 'Weekly check-in call',\r\n        dueDate: new Date().toISOString().split('T')[0],\r\n        category: 'Family',\r\n        completed: false,\r\n        createdAt: new Date().toISOString(),\r\n        importance: 'high',\r\n        days: [7]\r\n      },\r\n      {\r\n        id: '20',\r\n        title: 'Plan family vacation',\r\n        description: 'Research destinations and accommodations',\r\n        dueDate: new Date(Date.now() + 1209600000).toISOString().split('T')[0],\r\n        category: 'Family',\r\n        completed: false,\r\n        createdAt: new Date().toISOString(),\r\n        importance: 'low',\r\n        days: [1, 3]\r\n      }\r\n    ];\r\n    \r\n    return sampleTasks;\r\n  });\r\n\r\n  // Add state to track the last date the streak was updated\r\n  const [lastStreakDate, setLastStreakDate] = useState<string>(() => {\r\n    const saved = localStorage.getItem('plannr_last_streak_date');\r\n    return saved || '';\r\n  });\r\n  \r\n  // Save lastStreakDate to localStorage whenever it changes\r\n  useEffect(() => {\r\n    if (lastStreakDate) {\r\n      localStorage.setItem('plannr_last_streak_date', lastStreakDate);\r\n    }\r\n  }, [lastStreakDate]);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('plannr_tasks', JSON.stringify(tasks));\r\n  }, [tasks]);\r\n\r\n  const addTask = (task: Omit<Task, 'id' | 'createdAt'>) => {\r\n    // Check if a task with the same title already exists\r\n    const existingTaskIndex = tasks.findIndex(t => t.title === task.title);\r\n    \r\n    if (existingTaskIndex !== -1) {\r\n      // Update the existing task\r\n      const updatedTasks = [...tasks];\r\n      updatedTasks[existingTaskIndex] = {\r\n        ...updatedTasks[existingTaskIndex],\r\n        ...task,\r\n        // Preserve the original id and createdAt\r\n        id: updatedTasks[existingTaskIndex].id,\r\n        createdAt: updatedTasks[existingTaskIndex].createdAt\r\n      };\r\n      setTasks(updatedTasks);\r\n    } else {\r\n      // Create a new task\r\n      const newTask: Task = {\r\n        ...task,\r\n        id: Date.now().toString(),\r\n        createdAt: new Date().toISOString(),\r\n      };\r\n      setTasks(prevTasks => [...prevTasks, newTask]);\r\n    }\r\n  };\r\n\r\n  const updateTask = (id: string, updatedTask: Partial<Task>) => {\r\n    setTasks(prevTasks => {\r\n      const newTasks = prevTasks.map(task => \r\n        task.id === id ? { ...task, ...updatedTask } : task\r\n      );\r\n      localStorage.setItem('plannr_tasks', JSON.stringify(newTasks));\r\n      return newTasks;\r\n    });\r\n  };\r\n\r\n  const deleteTask = (id: string) => {\r\n    setTasks(prevTasks => prevTasks.filter(task => task.id !== id));\r\n  };\r\n\r\n  const completeTask = (id: string) => {\r\n    setTasks(prevTasks => {\r\n      const newTasks = prevTasks.map(task => \r\n        task.id === id ? { ...task, completed: true } : task\r\n      );\r\n      localStorage.setItem('plannr_tasks', JSON.stringify(newTasks));\r\n      return newTasks;\r\n    });\r\n    \r\n    // Update user stats\r\n    if (user) {\r\n      const completedTasks = user.tasksCompleted + 1;\r\n      \r\n      // Calculate achievements using exponential formula\r\n      // Level 1: 5 tasks, Level 2: 10 tasks, Level 3: 20 tasks, Level 4: 40 tasks, etc.\r\n      let achievementLevel = 0;\r\n      let threshold = 5;\r\n      \r\n      while (completedTasks >= threshold) {\r\n        achievementLevel++;\r\n        threshold = 5 * Math.pow(2, achievementLevel);\r\n      }\r\n      \r\n      // Update task completion stats (streak will be updated by the checkAllTasksCompleted effect)\r\n      updateProfile({\r\n        tasksCompleted: completedTasks,\r\n        achievements: achievementLevel\r\n      });\r\n      \r\n      // The streak will be updated by the checkAllTasksCompleted effect\r\n      // which runs whenever tasks change\r\n    }\r\n  };\r\n\r\n  const getTodayTasks = () => {\r\n    const today = new Date();\r\n    today.setHours(0, 0, 0, 0);\r\n    \r\n    return tasks.filter(task => {\r\n      const taskDate = new Date(task.dueDate);\r\n      taskDate.setHours(0, 0, 0, 0);\r\n      return taskDate.getTime() === today.getTime() && !task.completed;\r\n    });\r\n  };\r\n\r\n  const getUpcomingTasks = () => {\r\n    const today = new Date();\r\n    today.setHours(0, 0, 0, 0);\r\n    \r\n    return tasks.filter(task => {\r\n      const taskDate = new Date(task.dueDate);\r\n      taskDate.setHours(0, 0, 0, 0);\r\n      return taskDate.getTime() > today.getTime() && !task.completed;\r\n    }).sort((a, b) => new Date(a.dueDate).getTime() - new Date(b.dueDate).getTime());\r\n  };\r\n\r\n  const getTasksByCategory = (category: TaskCategory) => {\r\n    return tasks.filter(task => task.category === category && !task.completed);\r\n  };\r\n\r\n  const getTasksForNextDays = (days: number) => {\r\n    const result: Record<string, Task[]> = {};\r\n    const today = new Date();\r\n    \r\n    for (let i = 0; i < days; i++) {\r\n      const date = new Date(today);\r\n      date.setDate(today.getDate() + i);\r\n      date.setHours(0, 0, 0, 0);\r\n      \r\n      const dateStr = date.toISOString().split('T')[0];\r\n      \r\n      result[dateStr] = tasks.filter(task => {\r\n        const taskDate = new Date(task.dueDate);\r\n        taskDate.setHours(0, 0, 0, 0);\r\n        return taskDate.getTime() === date.getTime() && !task.completed;\r\n      });\r\n    }\r\n    \r\n    return result;\r\n  };\r\n\r\n  const addTaskToToday = (task: Task) => {\r\n    // Create a new task based on the template but for today\r\n    const today = new Date().toISOString().split('T')[0];\r\n    \r\n    const newTask: Omit<Task, 'id' | 'createdAt'> = {\r\n      title: task.title,\r\n      description: task.description,\r\n      dueDate: today,\r\n      category: task.category,\r\n      completed: false,\r\n      importance: task.importance,\r\n      days: task.days\r\n    };\r\n    \r\n    addTask(newTask);\r\n  };\r\n\r\n  // Add a function to check if the streak should be reset\r\n  const checkAndResetStreak = () => {\r\n    if (!user) return;\r\n    \r\n    const today = new Date();\r\n    today.setHours(0, 0, 0, 0);\r\n    const todayStr = today.toISOString().split('T')[0];\r\n    \r\n    // If lastStreakDate is empty, initialize it to today\r\n    if (!lastStreakDate) {\r\n      setLastStreakDate(todayStr);\r\n      return;\r\n    }\r\n    \r\n    // Check if a day was missed\r\n    const lastDate = new Date(lastStreakDate);\r\n    lastDate.setHours(0, 0, 0, 0);\r\n    \r\n    const yesterday = new Date(today);\r\n    yesterday.setDate(yesterday.getDate() - 1);\r\n    yesterday.setHours(0, 0, 0, 0);\r\n    \r\n    // If the last streak date is before yesterday, reset the streak\r\n    if (lastDate.getTime() < yesterday.getTime()) {\r\n      console.log('Streak reset due to missed day', {\r\n        lastStreakDate,\r\n        yesterday: yesterday.toISOString().split('T')[0],\r\n        today: todayStr\r\n      });\r\n      \r\n      updateProfile({\r\n        streak: 0\r\n      });\r\n      \r\n      // Update lastStreakDate to today to prevent multiple resets\r\n      setLastStreakDate(todayStr);\r\n    }\r\n  };\r\n  \r\n  // Check streak on component mount and when user changes\r\n  useEffect(() => {\r\n    if (user) {\r\n      checkAndResetStreak();\r\n    }\r\n  }, [user]);\r\n\r\n  // Add a function to check if all tasks for today are completed\r\n  const checkAllTasksCompleted = () => {\r\n    if (!user) return;\r\n    \r\n    const today = new Date();\r\n    today.setHours(0, 0, 0, 0);\r\n    const todayStr = today.toISOString().split('T')[0];\r\n    \r\n    const todaysTasks = tasks.filter(task => {\r\n      const taskDate = new Date(task.dueDate);\r\n      taskDate.setHours(0, 0, 0, 0);\r\n      return taskDate.getTime() === today.getTime();\r\n    });\r\n    \r\n    // If there are no tasks for today, don't update the streak\r\n    if (todaysTasks.length === 0) return;\r\n    \r\n    const allCompleted = todaysTasks.every(task => task.completed);\r\n    \r\n    // If all tasks are completed and we haven't updated the streak today\r\n    if (allCompleted && lastStreakDate !== todayStr) {\r\n      const newStreak = user.streak + 1;\r\n      \r\n      console.log('All tasks completed! Updating streak', {\r\n        previousStreak: user.streak,\r\n        newStreak,\r\n        tasksCount: todaysTasks.length\r\n      });\r\n      \r\n      updateProfile({\r\n        streak: newStreak\r\n      });\r\n      \r\n      setLastStreakDate(todayStr);\r\n    }\r\n  };\r\n  \r\n  // Check if all tasks are completed whenever tasks change\r\n  useEffect(() => {\r\n    checkAllTasksCompleted();\r\n  }, [tasks]);\r\n\r\n  const contextValue: TaskContextType = {\r\n    tasks,\r\n    addTask,\r\n    updateTask,\r\n    deleteTask,\r\n    completeTask,\r\n    getTodayTasks,\r\n    getUpcomingTasks,\r\n    getTasksByCategory,\r\n    getTasksForNextDays,\r\n    addTaskToToday\r\n  };\r\n\r\n  return (\r\n    <TaskContext.Provider value={contextValue}>\r\n      {children}\r\n    </TaskContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useTask = (): TaskContextType => {\r\n  const context = useContext(TaskContext);\r\n  if (context === undefined) {\r\n    throw new Error('useTask must be used within a TaskProvider');\r\n  }\r\n  return context;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}