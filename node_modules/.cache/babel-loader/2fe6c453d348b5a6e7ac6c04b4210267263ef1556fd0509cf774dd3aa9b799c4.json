{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext(undefined);export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[isAuthenticated,setIsAuthenticated]=useState(false);const checkAuth=()=>{const storedUser=localStorage.getItem('user');if(storedUser){setUser(JSON.parse(storedUser));setIsAuthenticated(true);}};useEffect(()=>{checkAuth();},[]);const login=async(username,password)=>{// In a real app, this would be an API call\n// For demo purposes, we'll just simulate a successful login\n// Special case for demo user\nif(username==='demo_user'){const demoUser={id:'demo123',username:'demo_user',fullName:'Demo User',location:{city:'San Francisco',country:'USA'},dob:'1990-01-01',joinDate:new Date().toISOString(),streak:5,achievements:3,tasksCompleted:18,workweekDays:[1,2,3,4,5]// Monday to Friday\n};localStorage.setItem('user',JSON.stringify(demoUser));setUser(demoUser);setIsAuthenticated(true);return;}// Regular user login\nconst mockUser={id:'1',username,joinDate:new Date().toISOString(),streak:0,achievements:0,tasksCompleted:0,workweekDays:[1,2,3,4,5]// Monday to Friday\n};localStorage.setItem('user',JSON.stringify(mockUser));setUser(mockUser);setIsAuthenticated(true);};const register=async(username,password,dob)=>{// In a real app, this would be an API call\n// For demo purposes, we'll just simulate a successful registration\nconst mockUser={id:'1',username,dob,joinDate:new Date().toISOString(),streak:0,achievements:0,tasksCompleted:0,workweekDays:[1,2,3,4,5]// Monday to Friday\n};localStorage.setItem('user',JSON.stringify(mockUser));setUser(mockUser);setIsAuthenticated(true);};const logout=()=>{localStorage.removeItem('user');setUser(null);setIsAuthenticated(false);};const updateProfile=data=>{if(user){const updatedUser={...user,...data};localStorage.setItem('user',JSON.stringify(updatedUser));setUser(updatedUser);}};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:{user,isAuthenticated,login,register,logout,updateProfile,checkAuth},children:children});};export const useAuth=()=>{const context=useContext(AuthContext);if(context===undefined){throw new Error('useAuth must be used within an AuthProvider');}return context;};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsx","_jsx","AuthContext","undefined","AuthProvider","_ref","children","user","setUser","isAuthenticated","setIsAuthenticated","checkAuth","storedUser","localStorage","getItem","JSON","parse","login","username","password","demoUser","id","fullName","location","city","country","dob","joinDate","Date","toISOString","streak","achievements","tasksCompleted","workweekDays","setItem","stringify","mockUser","register","logout","removeItem","updateProfile","data","updatedUser","Provider","value","useAuth","context","Error"],"sources":["C:/Users/User/Desktop/Plannr/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\n\r\nexport interface User {\r\n  id: string;\r\n  username: string;\r\n  fullName?: string;\r\n  location?: {\r\n    city: string;\r\n    country: string;\r\n  };\r\n  dob?: string;\r\n  joinDate: string;\r\n  streak: number;\r\n  achievements: number;\r\n  tasksCompleted: number;\r\n  workweekDays: number[];\r\n}\r\n\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  isAuthenticated: boolean;\r\n  login: (username: string, password: string) => Promise<void>;\r\n  register: (username: string, password: string, dob: string) => Promise<void>;\r\n  logout: () => void;\r\n  updateProfile: (data: Partial<User>) => void;\r\n  checkAuth: () => void;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);\r\n\r\n  const checkAuth = () => {\r\n    const storedUser = localStorage.getItem('user');\r\n    if (storedUser) {\r\n      setUser(JSON.parse(storedUser));\r\n      setIsAuthenticated(true);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    checkAuth();\r\n  }, []);\r\n\r\n  const login = async (username: string, password: string) => {\r\n    // In a real app, this would be an API call\r\n    // For demo purposes, we'll just simulate a successful login\r\n    \r\n    // Special case for demo user\r\n    if (username === 'demo_user') {\r\n      const demoUser: User = {\r\n        id: 'demo123',\r\n        username: 'demo_user',\r\n        fullName: 'Demo User',\r\n        location: {\r\n          city: 'San Francisco',\r\n          country: 'USA'\r\n        },\r\n        dob: '1990-01-01',\r\n        joinDate: new Date().toISOString(),\r\n        streak: 5,\r\n        achievements: 3,\r\n        tasksCompleted: 18,\r\n        workweekDays: [1, 2, 3, 4, 5], // Monday to Friday\r\n      };\r\n      \r\n      localStorage.setItem('user', JSON.stringify(demoUser));\r\n      setUser(demoUser);\r\n      setIsAuthenticated(true);\r\n      return;\r\n    }\r\n    \r\n    // Regular user login\r\n    const mockUser: User = {\r\n      id: '1',\r\n      username,\r\n      joinDate: new Date().toISOString(),\r\n      streak: 0,\r\n      achievements: 0,\r\n      tasksCompleted: 0,\r\n      workweekDays: [1, 2, 3, 4, 5], // Monday to Friday\r\n    };\r\n    \r\n    localStorage.setItem('user', JSON.stringify(mockUser));\r\n    setUser(mockUser);\r\n    setIsAuthenticated(true);\r\n  };\r\n\r\n  const register = async (username: string, password: string, dob: string) => {\r\n    // In a real app, this would be an API call\r\n    // For demo purposes, we'll just simulate a successful registration\r\n    const mockUser: User = {\r\n      id: '1',\r\n      username,\r\n      dob,\r\n      joinDate: new Date().toISOString(),\r\n      streak: 0,\r\n      achievements: 0,\r\n      tasksCompleted: 0,\r\n      workweekDays: [1, 2, 3, 4, 5], // Monday to Friday\r\n    };\r\n    \r\n    localStorage.setItem('user', JSON.stringify(mockUser));\r\n    setUser(mockUser);\r\n    setIsAuthenticated(true);\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('user');\r\n    setUser(null);\r\n    setIsAuthenticated(false);\r\n  };\r\n\r\n  const updateProfile = (data: Partial<User>) => {\r\n    if (user) {\r\n      const updatedUser = { ...user, ...data };\r\n      localStorage.setItem('user', JSON.stringify(updatedUser));\r\n      setUser(updatedUser);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ \r\n      user, \r\n      isAuthenticated, \r\n      login, \r\n      register, \r\n      logout, \r\n      updateProfile,\r\n      checkAuth\r\n    }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = (): AuthContextType => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}